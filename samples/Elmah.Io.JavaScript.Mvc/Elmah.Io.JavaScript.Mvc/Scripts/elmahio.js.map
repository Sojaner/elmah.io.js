{"version":3,"names":[],"mappings":"","sources":["elmahio.js"],"sourcesContent":["/*!\r\n * elmah.io Javascript Logger - version 3.0.0-beta2\r\n * (c) 2018 elmah.io, Apache 2.0 License, https://elmah.io\r\n */\r\n(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([], function () {\r\n            return factory(root);\r\n        });\r\n    } else if (typeof exports === 'object') {\r\n        module.exports = factory(root);\r\n    } else {\r\n        root.Elmahio = factory(root);\r\n    }\r\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\r\n\r\n    'use strict';\r\n\r\n    //\r\n    // Shared Variables\r\n    //\r\n\r\n    var scriptFile = document.getElementsByTagName('script');\r\n    var scriptIndex = scriptFile.length - 1;\r\n    var myScript = scriptFile[scriptIndex];\r\n    var queryString = myScript.src.replace(/^[^\\?]+\\??/, '');\r\n    var params = parseQuery(queryString);\r\n    var paramsLength = objectLength(params);\r\n\r\n    var debugSettings = {\r\n        label: ' elmah.io debugger : On ',\r\n        labelCSS: 'background: #06a89c; color: #ffffff; display: inline-block; font-size: 14px;',\r\n        successCSS: 'background: #d4edda; color: #155724; display: inline-block; font-size: 13px;',\r\n        errorCSS: 'background: #f8d7da; color: #721c24; display: inline-block; font-size: 13px;',\r\n        warningCSS: 'background: #fff3cd; color: #856404; display: inline-block; font-size: 13px;',\r\n        lightCSS: 'background: #e2e3e5; color: #383d41; display: inline-block; font-size: 13px;'\r\n    };\r\n\r\n    var defaults = {\r\n        apiKey: null,\r\n        logId: null,\r\n        debug: false,\r\n        application: null,\r\n        filter: null\r\n    };\r\n\r\n    //\r\n    // Shared Methods\r\n    //\r\n\r\n    var extend = function () {\r\n\r\n        // Variables\r\n        var extended = {};\r\n        var deep = false;\r\n        var i = 0;\r\n\r\n        // Check if a deep merge\r\n        if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\r\n            deep = arguments[0];\r\n            i++;\r\n        }\r\n\r\n        // Merge the object into the extended object\r\n        var merge = function (obj) {\r\n            for (var prop in obj) {\r\n                if (obj.hasOwnProperty(prop)) {\r\n                    // If property is an object, merge properties\r\n                    if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\r\n                        extended[prop] = extend(extended[prop], obj[prop]);\r\n                    } else {\r\n                        extended[prop] = obj[prop];\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        // Loop through each object and conduct a merge\r\n        for (; i < arguments.length; i++) {\r\n            var obj = arguments[i];\r\n            merge(obj);\r\n        }\r\n\r\n        return extended;\r\n\r\n    };\r\n\r\n    //\r\n    // Helpers\r\n    //\r\n\r\n    function parseQuery(query) {\r\n        var Params = new Object();\r\n        if (!query) return Params; // return empty object\r\n        var Pairs = query.split(/[;&]/);\r\n        for (var i = 0; i < Pairs.length; i++) {\r\n            var KeyVal = Pairs[i].split('=');\r\n            if (!KeyVal || KeyVal.length !== 2) continue;\r\n            var key = unescape(KeyVal[0]);\r\n            var val = unescape(KeyVal[1]);\r\n            val = val.replace(/\\+/g, ' ');\r\n            Params[key] = val;\r\n        }\r\n        return Params;\r\n    }\r\n\r\n    function objectLength(obj) {\r\n        var size = 0, key;\r\n        for (key in obj) {\r\n            if (obj.hasOwnProperty(key)) size++;\r\n        }\r\n        return size;\r\n    };\r\n\r\n    function getSearchParameters() {\r\n        var prmstr = window.location.search.substr(1);\r\n        return prmstr !== null && prmstr !== \"\" ? transformToAssocArray(prmstr) : {};\r\n    }\r\n\r\n    function transformToAssocArray(prmstr) {\r\n        var params = [];\r\n        var prmarr = prmstr.split(\"&\");\r\n        for (var i = 0; i < prmarr.length; i++) {\r\n            var tmparr = prmarr[i].split(\"=\");\r\n            params.push({\r\n                'key': tmparr[0],\r\n                'value': tmparr[1]\r\n            });\r\n        }\r\n        return params;\r\n    }\r\n\r\n    function merge_objects(obj1, obj2) {\r\n        var obj3 = {};\r\n        for (var attrname1 in obj1) {\r\n            obj3[attrname1] = obj1[attrname1];\r\n        }\r\n        for (var attrname2 in obj2) {\r\n            obj3[attrname2] = obj2[attrname2];\r\n        }\r\n\r\n        return obj3;\r\n    }\r\n\r\n    function ErrorStackParser(settings) {\r\n        'use strict';\r\n\r\n        var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+\\:\\d+/;\r\n        var CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+\\:\\d+|\\(native\\))/m;\r\n        var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code\\])?$/;\r\n\r\n        return {\r\n            parse: function (error) {\r\n                if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {\r\n                    return this.parseOpera(error);\r\n                } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\r\n                    return this.parseV8OrIE(error);\r\n                } else if (error.stack) {\r\n                    return this.parseFFOrSafari(error);\r\n                } else if (settings.debug) {\r\n                    console.log('%c Cannot parse given Error object', debugSettings.warningCSS);\r\n                } else {\r\n                    return null;\r\n                }\r\n            },\r\n\r\n            // Separate line and column numbers from a string of the form: (URI:Line:Column)\r\n            extractLocation: function ErrorStackParser$$extractLocation(urlLike) {\r\n                // Fail-fast but return locations like \"(native)\"\r\n                if (urlLike.indexOf(':') === -1) {\r\n                    return [urlLike];\r\n                }\r\n\r\n                var regExp = /(.+?)(?:\\:(\\d+))?(?:\\:(\\d+))?$/;\r\n                var parts = regExp.exec(urlLike.replace(/[\\(\\)]/g, ''));\r\n                return [parts[1], parts[2] || undefined, parts[3] || undefined];\r\n            },\r\n\r\n            parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {\r\n                var filtered = error.stack.split('\\n').filter(function (line) {\r\n                    return !!line.match(CHROME_IE_STACK_REGEXP);\r\n                }, this);\r\n\r\n                return filtered.map(function (line) {\r\n                    if (line.indexOf('(eval ') > -1) {\r\n                        // Throw away eval information until we implement stacktrace.js/stackframe#8\r\n                        line = line.replace(/eval code/g, 'eval').replace(/(\\(eval at [^\\()]*)|(\\)\\,.*$)/g, '');\r\n                    }\r\n                    var tokens = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '(').split(/\\s+/).slice(1);\r\n                    var locationParts = this.extractLocation(tokens.pop());\r\n                    var functionName = tokens.join(' ') || undefined;\r\n                    var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];\r\n\r\n                    return ({\r\n                        functionName: functionName,\r\n                        fileName: fileName,\r\n                        lineNumber: locationParts[1],\r\n                        columnNumber: locationParts[2],\r\n                        source: line\r\n                    });\r\n                }, this);\r\n            },\r\n\r\n            parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {\r\n                var filtered = error.stack.split('\\n').filter(function (line) {\r\n                    return !line.match(SAFARI_NATIVE_CODE_REGEXP);\r\n                }, this);\r\n\r\n                return filtered.map(function (line) {\r\n                    // Throw away eval information until we implement stacktrace.js/stackframe#8\r\n                    if (line.indexOf(' > eval') > -1) {\r\n                        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval\\:\\d+\\:\\d+/g, ':$1');\r\n                    }\r\n\r\n                    if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\r\n                        // Safari eval frames only have function names and nothing else\r\n                        return ({\r\n                            functionName: line\r\n                        });\r\n                    } else {\r\n                        var functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\r\n                        var matches = line.match(functionNameRegex);\r\n                        var functionName = matches && matches[1] ? matches[1] : undefined;\r\n                        var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));\r\n\r\n                        return ({\r\n                            functionName: functionName,\r\n                            fileName: locationParts[0],\r\n                            lineNumber: locationParts[1],\r\n                            columnNumber: locationParts[2],\r\n                            source: line\r\n                        });\r\n                    }\r\n                }, this);\r\n            },\r\n\r\n            parseOpera: function ErrorStackParser$$parseOpera(e) {\r\n                if (!e.stacktrace || (e.message.indexOf('\\n') > -1 &&\r\n                    e.message.split('\\n').length > e.stacktrace.split('\\n').length)) {\r\n                    return this.parseOpera9(e);\r\n                } else if (!e.stack) {\r\n                    return this.parseOpera10(e);\r\n                } else {\r\n                    return this.parseOpera11(e);\r\n                }\r\n            },\r\n\r\n            parseOpera9: function ErrorStackParser$$parseOpera9(e) {\r\n                var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\r\n                var lines = e.message.split('\\n');\r\n                var result = [];\r\n\r\n                for (var i = 2, len = lines.length; i < len; i += 2) {\r\n                    var match = lineRE.exec(lines[i]);\r\n                    if (match) {\r\n                        result.push(({\r\n                            fileName: match[2],\r\n                            lineNumber: match[1],\r\n                            source: lines[i]\r\n                        }));\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n\r\n            parseOpera10: function ErrorStackParser$$parseOpera10(e) {\r\n                var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\r\n                var lines = e.stacktrace.split('\\n');\r\n                var result = [];\r\n\r\n                for (var i = 0, len = lines.length; i < len; i += 2) {\r\n                    var match = lineRE.exec(lines[i]);\r\n                    if (match) {\r\n                        result.push(\r\n                            ({\r\n                                functionName: match[3] || undefined,\r\n                                fileName: match[2],\r\n                                lineNumber: match[1],\r\n                                source: lines[i]\r\n                            })\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n\r\n            // Opera 10.65+ Error.stack very similar to FF/Safari\r\n            parseOpera11: function ErrorStackParser$$parseOpera11(error) {\r\n                var filtered = error.stack.split('\\n').filter(function (line) {\r\n                    return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);\r\n                }, this);\r\n\r\n                return filtered.map(function (line) {\r\n                    var tokens = line.split('@');\r\n                    var locationParts = this.extractLocation(tokens.pop());\r\n                    var functionCall = (tokens.shift() || '');\r\n                    var functionName = functionCall\r\n                        .replace(/<anonymous function(: (\\w+))?>/, '$2')\r\n                        .replace(/\\([^\\)]*\\)/g, '') || undefined;\r\n                    var argsRaw;\r\n                    if (functionCall.match(/\\(([^\\)]*)\\)/)) {\r\n                        argsRaw = functionCall.replace(/^[^\\(]+\\(([^\\)]*)\\)$/, '$1');\r\n                    }\r\n                    var args = (argsRaw === undefined || argsRaw === '[arguments not available]') ?\r\n                        undefined : argsRaw.split(',');\r\n\r\n                    return ({\r\n                        functionName: functionName,\r\n                        args: args,\r\n                        fileName: locationParts[0],\r\n                        lineNumber: locationParts[1],\r\n                        columnNumber: locationParts[2],\r\n                        source: line\r\n                    });\r\n                }, this);\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n\r\n    //\r\n    // Constructor\r\n    // Can be named anything you want\r\n    //\r\n\r\n    var Constructor = function (options) {\r\n\r\n        //\r\n        // Unique Variables\r\n        //\r\n\r\n        var publicAPIs = {};\r\n        var settings;\r\n\r\n        function getPayload() {\r\n            var payload = {\r\n                \"url\": document.location.pathname || '/',\r\n                \"application\": settings.application\r\n            };\r\n\r\n            var payload_data = [];\r\n\r\n            if (navigator.language) payload_data.push({ \"key\": \"User-Language\", \"value\": navigator.language });\r\n            if (document.documentMode) payload_data.push({ \"key\": \"Document-Mode\", \"value\": document.documentMode });\r\n            if (window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth) payload_data.push({ \"key\": \"Browser-Width\", \"value\": window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth });\r\n            if (window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight) payload_data.push({ \"key\": \"Browser-Height\", \"value\": window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight });\r\n            if ((screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type) !== undefined) payload_data.push({ \"key\": \"Screen-Orientation\", \"value\": ((screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type).split(\"-\"))[0] });\r\n            if (screen.width) payload_data.push({ \"key\": \"Screen-Width\", \"value\": screen.width });\r\n            if (screen.height) payload_data.push({ \"key\": \"Screen-Height\", \"value\": screen.height });\r\n            if (screen.colorDepth) payload_data.push({ \"key\": \"Color-Depth\", \"value\": screen.colorDepth });\r\n            payload_data.push({ \"key\": \"X-ELMAHIO-SEARCH-isClientside\", \"value\": \"true\" });\r\n\r\n            payload.data = payload_data;\r\n\r\n            var payload_serverVariables = [];\r\n            if (navigator.userAgent) payload_serverVariables.push({ \"key\": \"User-Agent\", \"value\": navigator.userAgent });\r\n            if (document.referrer) payload_serverVariables.push({ \"key\": \"Referer\", \"value\": document.referrer });\r\n            if (document.location.protocol === \"https:\") payload_serverVariables.push({ \"key\": \"HTTPS\", \"value\": 'on' });\r\n            if (document.location.hostname) payload_serverVariables.push({ \"key\": \"Host\", \"value\": document.location.hostname });\r\n\r\n            payload.serverVariables = payload_serverVariables;\r\n\r\n            return payload;\r\n        }\r\n\r\n        function confirmResponse(status, response) {\r\n            if (settings.debug) {\r\n                if (status === 'error') {\r\n                    console.log('%c \\u2BC8 Error log: ' + '%c \\u2715 Not created ', debugSettings.lightCSS, debugSettings.errorCSS);\r\n                } else if (status === 'success') {\r\n                    console.log('%c \\u2BC8 Error log: ' + '%c \\u2714 ' + response + ' at ' + new Date().toLocaleString() + ' ', debugSettings.lightCSS, debugSettings.successCSS);\r\n                } else {\r\n                    console.log('%c \\u2BC8 Error log: ' + '%c \\u2715 Not created. Title should not be undefined, null or empty ! ', debugSettings.lightCSS, debugSettings.errorCSS);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Private methods\r\n\r\n        var sendPayload = function (apiKey, logId, callback, errorLog) {\r\n            var api_key = apiKey,\r\n                log_id = logId,\r\n                error = errorLog,\r\n                send = 1,\r\n                queryParams = getSearchParameters();\r\n\r\n            if ((api_key !== null && log_id !== null) || (paramsLength === 2)) {\r\n\r\n                // Priority for parameters\r\n                if (params.hasOwnProperty('apiKey') && params.hasOwnProperty('logId')) {\r\n                    api_key = params['apiKey'];\r\n                    log_id = params['logId'];\r\n                }\r\n\r\n                // get new XHR object\r\n                var xhr = new XMLHttpRequest();\r\n                xhr.open(\"POST\", \"https://api.elmah.io/v3/messages/\" + log_id + \"?api_key=\" + api_key, true);\r\n                xhr.setRequestHeader('Content-type', 'application/json');\r\n\r\n                xhr.onload = function (e) {\r\n                    if (xhr.readyState === 4) {\r\n                        if (xhr.status === 201) {\r\n                            callback('success', xhr.statusText);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                xhr.onerror = function (e) {\r\n                    callback('error', xhr.statusText);\r\n\r\n                    // on error event\r\n                    publicAPIs.emit('error', xhr.status, xhr.statusText);\r\n                }\r\n\r\n                var stack = ErrorStackParser(settings).parse(error.error);\r\n\r\n                var jsonData = {\r\n                    \"detail\": error.error.stack,\r\n                    \"title\": error.message || 'Unspecified error',\r\n                    \"source\": stack && stack.length > 0 ? stack[0].fileName : null,\r\n                    \"severity\": \"Error\",\r\n                    \"type\": error.error.name,\r\n                    \"queryString\": JSON.parse(JSON.stringify(queryParams))\r\n                };\r\n\r\n                // Add payload to jsonData\r\n                jsonData = merge_objects(jsonData, getPayload());\r\n\r\n                // filter callback\r\n                if (settings.filter !== null) {\r\n                    if (settings.filter(jsonData)) {\r\n                        send = 0;\r\n                    }\r\n                }\r\n\r\n                if (send === 1) {\r\n                    // on message event\r\n                    publicAPIs.emit('message', jsonData);\r\n\r\n                    // send message\r\n                    xhr.send(JSON.stringify(jsonData));\r\n                }\r\n\r\n            } else {\r\n                return console.log('Login api error');\r\n            }\r\n        };\r\n\r\n        var sendManualPayload = function (apiKey, logId, callback, logType, messageLog, errorLog) {\r\n            var api_key = apiKey,\r\n                log_id = logId,\r\n                type = logType,\r\n                error = errorLog,\r\n                message = messageLog,\r\n                send = 1,\r\n                queryParams = getSearchParameters();\r\n\r\n            if ((api_key !== null && log_id !== null) || (paramsLength === 2)) {\r\n\r\n                // Priority for parameters\r\n                if (params.hasOwnProperty('apiKey') && params.hasOwnProperty('logId')) {\r\n                    api_key = params['apiKey'];\r\n                    log_id = params['logId'];\r\n                }\r\n\r\n                // get new XHR object\r\n                var xhr = new XMLHttpRequest();\r\n                xhr.open(\"POST\", \"https://api.elmah.io/v3/messages/\" + log_id + \"?api_key=\" + api_key, true);\r\n                xhr.setRequestHeader('Content-type', 'application/json');\r\n\r\n                xhr.onload = function (e) {\r\n                    if (xhr.readyState === 4) {\r\n                        if (xhr.status === 201) {\r\n                            callback('success', xhr.statusText);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                xhr.onerror = function (e) {\r\n                    callback('error', xhr.statusText);\r\n\r\n                    // on error event\r\n                    publicAPIs.emit('error', xhr.status, xhr.statusText);\r\n                }\r\n\r\n                if (type !== \"Log\") {\r\n\r\n                    var stack = error ? ErrorStackParser(settings).parse(error) : null;\r\n\r\n                    var jsonData = {\r\n                        \"title\": message,\r\n                        \"source\": stack && stack.length > 0 ? stack[0].fileName : null,\r\n                        \"detail\": error ? error.stack : null,\r\n                        \"severity\": type,\r\n                        \"type\": error ? error.name : null,\r\n                        \"queryString\": JSON.parse(JSON.stringify(queryParams))\r\n                    };\r\n\r\n                    // Add payload to jsonData\r\n                    jsonData = merge_objects(jsonData, getPayload());\r\n\r\n                } else {\r\n\r\n                    jsonData = error;\r\n\r\n                }\r\n\r\n                // filter callback\r\n                if (settings.filter !== null) {\r\n                    if (settings.filter(jsonData)) {\r\n                        send = 0;\r\n                    }\r\n                }\r\n\r\n                if (send === 1) {\r\n                    if (jsonData.title) {\r\n\r\n                        // on message event\r\n                        publicAPIs.emit('message', jsonData);\r\n\r\n                        // send message\r\n                        xhr.send(JSON.stringify(jsonData));\r\n\r\n                    } else {\r\n                        callback('missing-title', xhr.statusText);\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                return console.log('Login api error');\r\n            }\r\n        };\r\n\r\n        // Some public methods\r\n\r\n        publicAPIs.error = function (msg) {\r\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Error', msg);\r\n        };\r\n        publicAPIs.error = function (msg, error) {\r\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Error', msg, error);\r\n        };\r\n\r\n        publicAPIs.verbose = function (msg) {\r\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Verbose', msg);\r\n        };\r\n        publicAPIs.verbose = function (msg, error) {\r\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Verbose', msg, error);\r\n        };\r\n\r\n        publicAPIs.debug = function (msg) {\r\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Debug', msg);\r\n        };\r\n        publicAPIs.debug = function (msg, error) {\r\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Debug', msg, error);\r\n        };\r\n\r\n        publicAPIs.information = function (msg) {\r\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Information', msg);\r\n        };\r\n        publicAPIs.information = function (msg, error) {\r\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Information', msg, error);\r\n        };\r\n\r\n        publicAPIs.warning = function (msg) {\r\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Warning', msg);\r\n        };\r\n        publicAPIs.warning = function (msg, error) {\r\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Warning', msg, error);\r\n        };\r\n\r\n        publicAPIs.fatal = function (msg) {\r\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Fatal', msg);\r\n        };\r\n        publicAPIs.fatal = function (msg, error) {\r\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Fatal', msg, error);\r\n        };\r\n\r\n        publicAPIs.log = function (obj) {\r\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Log', null, obj);\r\n        };\r\n\r\n        publicAPIs.on = function (name, callback, ctx) {\r\n            var e = this.e || (this.e = {});\r\n\r\n            (e[name] || (e[name] = [])).push({\r\n                fn: callback,\r\n                ctx: ctx\r\n            });\r\n\r\n            return this;\r\n        };\r\n\r\n        publicAPIs.emit = function (name) {\r\n            var data = [].slice.call(arguments, 1);\r\n            var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\r\n            var i = 0;\r\n            var len = evtArr.length;\r\n\r\n            for (i; i < len; i++) {\r\n                evtArr[i].fn.apply(evtArr[i].ctx, data);\r\n            }\r\n\r\n            return this;\r\n        };\r\n\r\n        publicAPIs.init = function (options) {\r\n\r\n            // Merge options into defaults\r\n            settings = extend(defaults, options || {});\r\n\r\n            // Code goes here...\r\n            window.onerror = function (message, source, lineno, colno, error) {\r\n\r\n                var errorLog = {\r\n                    'message': message,\r\n                    'source': source,\r\n                    'lineno': lineno,\r\n                    'colno': colno,\r\n                    'error': error\r\n                }\r\n\r\n                sendPayload(settings.apiKey, settings.logId, confirmResponse, errorLog);\r\n\r\n                return false;\r\n            }\r\n\r\n        };\r\n\r\n        // Initialize the plugin\r\n        publicAPIs.init(options);\r\n\r\n        if (settings.debug) {\r\n            console.log('%c' + debugSettings.label, debugSettings.labelCSS);\r\n        }\r\n\r\n        // Return the public APIs\r\n        return publicAPIs;\r\n\r\n    };\r\n\r\n\r\n    //\r\n    // Return the constructor\r\n    //\r\n\r\n    if (paramsLength && params.hasOwnProperty('apiKey') && params.hasOwnProperty('logId')) {\r\n        // Immediately-Invoked Function Expression (IIFE)\r\n        return new Constructor;\r\n    } else {\r\n        // UMD Constructor\r\n        return Constructor;\r\n    }\r\n\r\n});\r\n"],"file":"elmahio.js"}