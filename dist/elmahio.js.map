{"version":3,"names":[],"mappings":"","sources":["elmahio.js"],"sourcesContent":["/*!\n * elmah.io Javascript Logger - version 3.0.0-beta2\n * (c) 2018 elmah.io, Apache 2.0 License, https://elmah.io\n */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return factory(root);\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory(root);\n    } else {\n        root.Elmahio = factory(root);\n    }\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\n\n    'use strict';\n\n    //\n    // ==== STACKFRAME ====\n    //\n\n    var StackFrame = (function () {\n        \"use strict\";\n        function _isNumber(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n        function _capitalize(str) {\n            return str.charAt(0).toUpperCase() + str.substring(1);\n        }\n        function _getter(p) {\n            return function () {\n                return this[p];\n            };\n        }\n        var booleanProps = [\"isConstructor\", \"isEval\", \"isNative\", \"isToplevel\"];\n        var numericProps = [\"columnNumber\", \"lineNumber\"];\n        var stringProps = [\"fileName\", \"functionName\", \"source\"];\n        var arrayProps = [\"args\"];\n        var props = booleanProps.concat(numericProps, stringProps, arrayProps);\n        function StackFrame(obj) {\n            if (obj instanceof Object) {\n                for (var i = 0; i < props.length; i++) {\n                    if (obj.hasOwnProperty(props[i]) && obj[props[i]] !== undefined) {\n                        this[\"set\" + _capitalize(props[i])](obj[props[i]]);\n                    }\n                }\n            }\n        }\n        StackFrame.prototype = {\n            getArgs: function () {\n                return this.args;\n            },\n            setArgs: function (v) {\n                if (Object.prototype.toString.call(v) !== \"[object Array]\") {\n                    throw new TypeError(\"Args must be an Array\");\n                }\n                this.args = v;\n            },\n            getEvalOrigin: function () {\n                return this.evalOrigin;\n            },\n            setEvalOrigin: function (v) {\n                if (v instanceof StackFrame) {\n                    this.evalOrigin = v;\n                } else if (v instanceof Object) {\n                    this.evalOrigin = new StackFrame(v);\n                } else {\n                    throw new TypeError(\"Eval Origin must be an Object or StackFrame\");\n                }\n            },\n            toString: function () {\n                var functionName = this.getFunctionName() || \"{anonymous}\";\n                var args = \"(\" + (this.getArgs() || []).join(\",\") + \")\";\n                var fileName = this.getFileName() ? \"@\" + this.getFileName() : \"\";\n                var lineNumber = _isNumber(this.getLineNumber()) ? \":\" + this.getLineNumber() : \"\";\n                var columnNumber = _isNumber(this.getColumnNumber()) ? \":\" + this.getColumnNumber() : \"\";\n                return functionName + args + fileName + lineNumber + columnNumber;\n            }\n        };\n        StackFrame.fromString = function StackFrame$$fromString(str) {\n            var argsStartIndex = str.indexOf(\"(\");\n            var argsEndIndex = str.lastIndexOf(\")\");\n            var functionName = str.substring(0, argsStartIndex);\n            var args = str.substring(argsStartIndex + 1, argsEndIndex).split(\",\");\n            var locationString = str.substring(argsEndIndex + 1);\n            if (locationString.indexOf(\"@\") === 0) {\n                var parts = /@(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(locationString, \"\");\n                var fileName = parts[1];\n                var lineNumber = parts[2];\n                var columnNumber = parts[3];\n            }\n            return new StackFrame({\n                functionName: functionName,\n                args: args || undefined,\n                fileName: fileName,\n                lineNumber: lineNumber || undefined,\n                columnNumber: columnNumber || undefined\n            });\n        };\n        for (var i = 0; i < booleanProps.length; i++) {\n            StackFrame.prototype[\"get\" + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);\n            StackFrame.prototype[\"set\" + _capitalize(booleanProps[i])] = function (p) {\n                return function (v) {\n                    this[p] = Boolean(v);\n                };\n            }(booleanProps[i]);\n        }\n        for (var j = 0; j < numericProps.length; j++) {\n            StackFrame.prototype[\"get\" + _capitalize(numericProps[j])] = _getter(numericProps[j]);\n            StackFrame.prototype[\"set\" + _capitalize(numericProps[j])] = function (p) {\n                return function (v) {\n                    if (!_isNumber(v)) {\n                        throw new TypeError(p + \" must be a Number\");\n                    }\n                    this[p] = Number(v);\n                };\n            }(numericProps[j]);\n        }\n        for (var k = 0; k < stringProps.length; k++) {\n            StackFrame.prototype[\"get\" + _capitalize(stringProps[k])] = _getter(stringProps[k]);\n            StackFrame.prototype[\"set\" + _capitalize(stringProps[k])] = function (p) {\n                return function (v) {\n                    this[p] = String(v);\n                };\n            }(stringProps[k]);\n        }\n        return StackFrame;\n    })();\n\n    //\n    // ==== ERROR STACK PARSER ====\n    //\n\n    var ErrorStackParser = (function () {\n        \"use strict\";\n        var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+\\:\\d+/;\n        var CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+\\:\\d+|\\(native\\))/m;\n        var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code\\])?$/;\n        return {\n            /**\n                 * Given an Error object, extract the most information from it.\n                 *\n                 * @param {Error} error object\n                 * @return {Array} of StackFrames\n                 */\n            parse: function ErrorStackParser$$parse(error) {\n                if (typeof error.stacktrace !== \"undefined\" || typeof error[\"opera#sourceloc\"] !== \"undefined\") {\n                    return this.parseOpera(error);\n                } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n                    return this.parseV8OrIE(error);\n                } else if (error.stack) {\n                    return this.parseFFOrSafari(error);\n                } else {\n                    throw new Error(\"Cannot parse given Error object\");\n                }\n            },\n            // Separate line and column numbers from a string of the form: (URI:Line:Column)\n            extractLocation: function ErrorStackParser$$extractLocation(urlLike) {\n                // Fail-fast but return locations like \"(native)\"\n                if (urlLike.indexOf(\":\") === -1) {\n                    return [urlLike];\n                }\n                var regExp = /(.+?)(?:\\:(\\d+))?(?:\\:(\\d+))?$/;\n                var parts = regExp.exec(urlLike.replace(/[\\(\\)]/g, \"\"));\n                return [parts[1], parts[2] || undefined, parts[3] || undefined];\n            },\n            parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {\n                var filtered = error.stack.split(\"\\n\").filter(function (line) {\n                    return !!line.match(CHROME_IE_STACK_REGEXP);\n                }, this);\n                return filtered.map(function (line) {\n                    if (line.indexOf(\"(eval \") > -1) {\n                        // Throw away eval information until we implement stacktrace.js/stackframe#8\n                        line = line.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^\\()]*)|(\\)\\,.*$)/g, \"\");\n                    }\n                    var tokens = line.replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\").split(/\\s+/).slice(1);\n                    var locationParts = this.extractLocation(tokens.pop());\n                    var functionName = tokens.join(\" \") || undefined;\n                    var fileName = [\"eval\", \"<anonymous>\"].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];\n                    return new StackFrame({\n                        functionName: functionName,\n                        fileName: fileName,\n                        lineNumber: locationParts[1],\n                        columnNumber: locationParts[2],\n                        source: line\n                    });\n                }, this);\n            },\n            parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {\n                var filtered = error.stack.split(\"\\n\").filter(function (line) {\n                    return !line.match(SAFARI_NATIVE_CODE_REGEXP);\n                }, this);\n                return filtered.map(function (line) {\n                    // Throw away eval information until we implement stacktrace.js/stackframe#8\n                    if (line.indexOf(\" > eval\") > -1) {\n                        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval\\:\\d+\\:\\d+/g, \":$1\");\n                    }\n                    if (line.indexOf(\"@\") === -1 && line.indexOf(\":\") === -1) {\n                        // Safari eval frames only have function names and nothing else\n                        return new StackFrame({\n                            functionName: line\n                        });\n                    } else {\n                        var functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n                        var matches = line.match(functionNameRegex);\n                        var functionName = matches && matches[1] ? matches[1] : undefined;\n                        var locationParts = this.extractLocation(line.replace(functionNameRegex, \"\"));\n                        return new StackFrame({\n                            functionName: functionName,\n                            fileName: locationParts[0],\n                            lineNumber: locationParts[1],\n                            columnNumber: locationParts[2],\n                            source: line\n                        });\n                    }\n                }, this);\n            },\n            parseOpera: function ErrorStackParser$$parseOpera(e) {\n                if (!e.stacktrace || e.message.indexOf(\"\\n\") > -1 && e.message.split(\"\\n\").length > e.stacktrace.split(\"\\n\").length) {\n                    return this.parseOpera9(e);\n                } else if (!e.stack) {\n                    return this.parseOpera10(e);\n                } else {\n                    return this.parseOpera11(e);\n                }\n            },\n            parseOpera9: function ErrorStackParser$$parseOpera9(e) {\n                var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n                var lines = e.message.split(\"\\n\");\n                var result = [];\n                for (var i = 2, len = lines.length; i < len; i += 2) {\n                    var match = lineRE.exec(lines[i]);\n                    if (match) {\n                        result.push(new StackFrame({\n                            fileName: match[2],\n                            lineNumber: match[1],\n                            source: lines[i]\n                        }));\n                    }\n                }\n                return result;\n            },\n            parseOpera10: function ErrorStackParser$$parseOpera10(e) {\n                var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n                var lines = e.stacktrace.split(\"\\n\");\n                var result = [];\n                for (var i = 0, len = lines.length; i < len; i += 2) {\n                    var match = lineRE.exec(lines[i]);\n                    if (match) {\n                        result.push(new StackFrame({\n                            functionName: match[3] || undefined,\n                            fileName: match[2],\n                            lineNumber: match[1],\n                            source: lines[i]\n                        }));\n                    }\n                }\n                return result;\n            },\n            // Opera 10.65+ Error.stack very similar to FF/Safari\n            parseOpera11: function ErrorStackParser$$parseOpera11(error) {\n                var filtered = error.stack.split(\"\\n\").filter(function (line) {\n                    return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);\n                }, this);\n                return filtered.map(function (line) {\n                    var tokens = line.split(\"@\");\n                    var locationParts = this.extractLocation(tokens.pop());\n                    var functionCall = tokens.shift() || \"\";\n                    var functionName = functionCall.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^\\)]*\\)/g, \"\") || undefined;\n                    var argsRaw;\n                    if (functionCall.match(/\\(([^\\)]*)\\)/)) {\n                        argsRaw = functionCall.replace(/^[^\\(]+\\(([^\\)]*)\\)$/, \"$1\");\n                    }\n                    var args = argsRaw === undefined || argsRaw === \"[arguments not available]\" ? undefined : argsRaw.split(\",\");\n                    return new StackFrame({\n                        functionName: functionName,\n                        args: args,\n                        fileName: locationParts[0],\n                        lineNumber: locationParts[1],\n                        columnNumber: locationParts[2],\n                        source: line\n                    });\n                }, this);\n            }\n        };\n    })();\n\n    //\n    // ==== STACKTRACE-GPS ====\n    //\n\n    var StackTraceGPS = (function (SourceMap, StackFrame) {\n        \"use strict\";\n        /**\n           * Make a X-Domain request to url and callback.\n           *\n           * @param {String} url\n           * @returns {Promise} with response text if fulfilled\n           */\n        function _xdr(url) {\n            return new Promise(function (resolve, reject) {\n                var req = new XMLHttpRequest();\n                req.open(\"get\", url);\n                req.onerror = reject;\n                req.onreadystatechange = function onreadystatechange() {\n                    if (req.readyState === 4) {\n                        if (req.status >= 200 && req.status < 300 || url.substr(0, 7) === \"file://\" && req.responseText) {\n                            resolve(req.responseText);\n                        } else {\n                            reject(new Error(\"HTTP status: \" + req.status + \" retrieving \" + url));\n                        }\n                    }\n                };\n                req.send();\n            });\n        }\n        /**\n           * Convert a Base64-encoded string into its original representation.\n           * Used for inline sourcemaps.\n           *\n           * @param {String} b64str Base-64 encoded string\n           * @returns {String} original representation of the base64-encoded string.\n           */\n        function _atob(b64str) {\n            if (typeof window !== \"undefined\" && window.atob) {\n                return window.atob(b64str);\n            } else {\n                throw new Error(\"You must supply a polyfill for window.atob in this environment\");\n            }\n        }\n        function _parseJson(string) {\n            if (typeof JSON !== \"undefined\" && JSON.parse) {\n                return JSON.parse(string);\n            } else {\n                throw new Error(\"You must supply a polyfill for JSON.parse in this environment\");\n            }\n        }\n        function _findFunctionName(source, lineNumber) {\n            var syntaxes = [ // {name} = function ({args}) TODO args capture\n                /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*function\\b/, // function {name}({args}) m[1]=name m[2]=args\n                /function\\s+([^('\"`]*?)\\s*\\(([^)]*)\\)/, // {name} = eval()\n                /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*(?:eval|new Function)\\b/, // fn_name() {\n                /\\b(?!(?:if|for|switch|while|with|catch)\\b)(?:(?:static)\\s+)?(\\S+)\\s*\\(.*?\\)\\s*\\{/, // {name} = () => {\n                /['\"]?([$_A-Za-z][$_A-Za-z0-9]*)['\"]?\\s*[:=]\\s*\\(.*?\\)\\s*=>/];\n            var lines = source.split(\"\\n\");\n            // Walk backwards in the source lines until we find the line which matches one of the patterns above\n            var code = \"\";\n            var maxLines = Math.min(lineNumber, 20);\n            for (var i = 0; i < maxLines; ++i) {\n                // lineNo is 1-based, source[] is 0-based\n                var line = lines[lineNumber - i - 1];\n                var commentPos = line.indexOf(\"//\");\n                if (commentPos >= 0) {\n                    line = line.substr(0, commentPos);\n                }\n                if (line) {\n                    code = line + code;\n                    var len = syntaxes.length;\n                    for (var index = 0; index < len; index++) {\n                        var m = syntaxes[index].exec(code);\n                        if (m && m[1]) {\n                            return m[1];\n                        }\n                    }\n                }\n            }\n            return undefined;\n        }\n        function _ensureSupportedEnvironment() {\n            if (typeof Object.defineProperty !== \"function\" || typeof Object.create !== \"function\") {\n                throw new Error(\"Unable to consume source maps in older browsers\");\n            }\n        }\n        function _ensureStackFrameIsLegit(stackframe) {\n            if (typeof stackframe !== \"object\") {\n                throw new TypeError(\"Given StackFrame is not an object\");\n            } else if (typeof stackframe.fileName !== \"string\") {\n                throw new TypeError(\"Given file name is not a String\");\n            } else if (typeof stackframe.lineNumber !== \"number\" || stackframe.lineNumber % 1 !== 0 || stackframe.lineNumber < 1) {\n                throw new TypeError(\"Given line number must be a positive integer\");\n            } else if (typeof stackframe.columnNumber !== \"number\" || stackframe.columnNumber % 1 !== 0 || stackframe.columnNumber < 0) {\n                throw new TypeError(\"Given column number must be a non-negative integer\");\n            }\n            return true;\n        }\n        function _findSourceMappingURL(source) {\n            var sourceMappingUrlRegExp = /\\/\\/[#@] ?sourceMappingURL=([^\\s'\"]+)\\s*$/gm;\n            var lastSourceMappingUrl;\n            var matchSourceMappingUrl;\n            while (matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source)) {\n                // jshint ignore:line\n                lastSourceMappingUrl = matchSourceMappingUrl[1];\n            }\n            if (lastSourceMappingUrl) {\n                return lastSourceMappingUrl;\n            } else {\n                throw new Error(\"sourceMappingURL not found\");\n            }\n        }\n        function _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache) {\n            return new Promise(function (resolve, reject) {\n                var loc = sourceMapConsumer.originalPositionFor({\n                    line: stackframe.lineNumber,\n                    column: stackframe.columnNumber\n                });\n                if (loc.source) {\n                    // cache mapped sources\n                    var mappedSource = sourceMapConsumer.sourceContentFor(loc.source);\n                    if (mappedSource) {\n                        sourceCache[loc.source] = mappedSource;\n                    }\n                    resolve(// given stackframe and source location, update stackframe\n                        new StackFrame({\n                            functionName: loc.name || stackframe.functionName,\n                            args: stackframe.args,\n                            fileName: loc.source,\n                            lineNumber: loc.line,\n                            columnNumber: loc.column\n                        }));\n                } else {\n                    reject(new Error(\"Could not get original source for given stackframe and source map\"));\n                }\n            });\n        }\n        /**\n           * @constructor\n           * @param {Object} opts\n           *      opts.sourceCache = {url: \"Source String\"} => preload source cache\n           *      opts.sourceMapConsumerCache = {/path/file.js.map: SourceMapConsumer}\n           *      opts.offline = True to prevent network requests.\n           *              Best effort without sources or source maps.\n           *      opts.ajax = Promise returning function to make X-Domain requests\n           */\n        return function StackTraceGPS(opts) {\n            if (!(this instanceof StackTraceGPS)) {\n                return new StackTraceGPS(opts);\n            }\n            opts = opts || {};\n            this.sourceCache = opts.sourceCache || {};\n            this.sourceMapConsumerCache = opts.sourceMapConsumerCache || {};\n            this.ajax = opts.ajax || _xdr;\n            this._atob = opts.atob || _atob;\n            this._get = function _get(location) {\n                return new Promise(function (resolve, reject) {\n                    var isDataUrl = location.substr(0, 5) === \"data:\";\n                    if (this.sourceCache[location]) {\n                        resolve(this.sourceCache[location]);\n                    } else if (opts.offline && !isDataUrl) {\n                        reject(new Error(\"Cannot make network requests in offline mode\"));\n                    } else {\n                        if (isDataUrl) {\n                            // data URLs can have parameters.\n                            // see http://tools.ietf.org/html/rfc2397\n                            var supportedEncodingRegexp = /^data:application\\/json;([\\w=:\"-]+;)*base64,/;\n                            var match = location.match(supportedEncodingRegexp);\n                            if (match) {\n                                var sourceMapStart = match[0].length;\n                                var encodedSource = location.substr(sourceMapStart);\n                                var source = this._atob(encodedSource);\n                                this.sourceCache[location] = source;\n                                resolve(source);\n                            } else {\n                                reject(new Error(\"The encoding of the inline sourcemap is not supported\"));\n                            }\n                        } else {\n                            var xhrPromise = this.ajax(location, {\n                                method: \"get\"\n                            });\n                            // Cache the Promise to prevent duplicate in-flight requests\n                            this.sourceCache[location] = xhrPromise;\n                            xhrPromise.then(resolve, reject);\n                        }\n                    }\n                }.bind(this));\n            };\n            /**\n                 * Creating SourceMapConsumers is expensive, so this wraps the creation of a\n                 * SourceMapConsumer in a per-instance cache.\n                 *\n                 * @param {String} sourceMappingURL = URL to fetch source map from\n                 * @param {String} defaultSourceRoot = Default source root for source map if undefined\n                 * @returns {Promise} that resolves a SourceMapConsumer\n                 */\n            this._getSourceMapConsumer = function _getSourceMapConsumer(sourceMappingURL, defaultSourceRoot) {\n                return new Promise(function (resolve, reject) {\n                    if (this.sourceMapConsumerCache[sourceMappingURL]) {\n                        resolve(this.sourceMapConsumerCache[sourceMappingURL]);\n                    } else {\n                        var sourceMapConsumerPromise = new Promise(function (resolve, reject) {\n                            return this._get(sourceMappingURL).then(function (sourceMapSource) {\n                                if (typeof sourceMapSource === \"string\") {\n                                    sourceMapSource = _parseJson(sourceMapSource.replace(/^\\)\\]\\}'/, \"\"));\n                                }\n                                if (typeof sourceMapSource.sourceRoot === \"undefined\") {\n                                    sourceMapSource.sourceRoot = defaultSourceRoot;\n                                }\n                                resolve(new SourceMap.SourceMapConsumer(sourceMapSource));\n                            }, reject);\n                        }.bind(this));\n                        this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise;\n                        resolve(sourceMapConsumerPromise);\n                    }\n                }.bind(this));\n            };\n            /**\n                 * Given a StackFrame, enhance function name and use source maps for a\n                 * better StackFrame.\n                 *\n                 * @param {StackFrame} stackframe object\n                 * @returns {Promise} that resolves with with source-mapped StackFrame\n                 */\n            this.pinpoint = function StackTraceGPS$$pinpoint(stackframe) {\n                return new Promise(function (resolve, reject) {\n                    this.getMappedLocation(stackframe).then(function (mappedStackFrame) {\n                        function resolveMappedStackFrame() {\n                            resolve(mappedStackFrame);\n                        }\n                        this.findFunctionName(mappedStackFrame).then(resolve, resolveMappedStackFrame)[\"catch\"](resolveMappedStackFrame);\n                    }.bind(this), reject);\n                }.bind(this));\n            };\n            /**\n                 * Given a StackFrame, guess function name from location information.\n                 *\n                 * @param {StackFrame} stackframe\n                 * @returns {Promise} that resolves with enhanced StackFrame.\n                 */\n            this.findFunctionName = function StackTraceGPS$$findFunctionName(stackframe) {\n                return new Promise(function (resolve, reject) {\n                    _ensureStackFrameIsLegit(stackframe);\n                    this._get(stackframe.fileName).then(function getSourceCallback(source) {\n                        var lineNumber = stackframe.lineNumber;\n                        var columnNumber = stackframe.columnNumber;\n                        var guessedFunctionName = _findFunctionName(source, lineNumber, columnNumber);\n                        // Only replace functionName if we found something\n                        if (guessedFunctionName) {\n                            resolve(new StackFrame({\n                                functionName: guessedFunctionName,\n                                args: stackframe.args,\n                                fileName: stackframe.fileName,\n                                lineNumber: lineNumber,\n                                columnNumber: columnNumber\n                            }));\n                        } else {\n                            resolve(stackframe);\n                        }\n                    }, reject)[\"catch\"](reject);\n                }.bind(this));\n            };\n            /**\n                 * Given a StackFrame, seek source-mapped location and return new enhanced StackFrame.\n                 *\n                 * @param {StackFrame} stackframe\n                 * @returns {Promise} that resolves with enhanced StackFrame.\n                 */\n            this.getMappedLocation = function StackTraceGPS$$getMappedLocation(stackframe) {\n                return new Promise(function (resolve, reject) {\n                    _ensureSupportedEnvironment();\n                    _ensureStackFrameIsLegit(stackframe);\n                    var sourceCache = this.sourceCache;\n                    var fileName = stackframe.fileName;\n                    this._get(fileName).then(function (source) {\n                        var sourceMappingURL = _findSourceMappingURL(source);\n                        var isDataUrl = sourceMappingURL.substr(0, 5) === \"data:\";\n                        var defaultSourceRoot = fileName.substring(0, fileName.lastIndexOf(\"/\") + 1);\n                        if (sourceMappingURL[0] !== \"/\" && !isDataUrl && !/^https?:\\/\\/|^\\/\\//i.test(sourceMappingURL)) {\n                            sourceMappingURL = defaultSourceRoot + sourceMappingURL;\n                        }\n                        return this._getSourceMapConsumer(sourceMappingURL, defaultSourceRoot).then(function (sourceMapConsumer) {\n                            return _extractLocationInfoFromSourceMapSource(stackframe, sourceMapConsumer, sourceCache).then(resolve)[\"catch\"](function () {\n                                resolve(stackframe);\n                            });\n                        });\n                    }.bind(this), reject)[\"catch\"](reject);\n                }.bind(this));\n            };\n        };\n    })();\n\n    //\n    // Shared Variables\n    //\n\n    var scriptFile = document.getElementsByTagName('script');\n    var scriptIndex = scriptFile.length - 1;\n    var myScript = scriptFile[scriptIndex];\n    var queryString = myScript.src.replace(/^[^\\?]+\\??/, '');\n    var params = parseQuery(queryString);\n    var paramsLength = objectLength(params);\n\n    var debugSettings = {\n        label: ' elmah.io debugger : On ',\n        labelCSS: 'background: #06a89c; color: #ffffff; display: inline-block; font-size: 14px;',\n        successCSS: 'background: #d4edda; color: #155724; display: inline-block; font-size: 13px;',\n        errorCSS: 'background: #f8d7da; color: #721c24; display: inline-block; font-size: 13px;',\n        warningCSS: 'background: #fff3cd; color: #856404; display: inline-block; font-size: 13px;',\n        lightCSS: 'background: #e2e3e5; color: #383d41; display: inline-block; font-size: 13px;'\n    };\n\n    var defaults = {\n        apiKey: null,\n        logId: null,\n        debug: false,\n        application: null,\n        filter: null\n    };\n\n    //\n    // Shared Methods\n    //\n\n    var extend = function () {\n\n        // Variables\n        var extended = {};\n        var deep = false;\n        var i = 0;\n\n        // Check if a deep merge\n        if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n            deep = arguments[0];\n            i++;\n        }\n\n        // Merge the object into the extended object\n        var merge = function (obj) {\n            for (var prop in obj) {\n                if (obj.hasOwnProperty(prop)) {\n                    // If property is an object, merge properties\n                    if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n                        extended[prop] = extend(extended[prop], obj[prop]);\n                    } else {\n                        extended[prop] = obj[prop];\n                    }\n                }\n            }\n        };\n\n        // Loop through each object and conduct a merge\n        for (; i < arguments.length; i++) {\n            var obj = arguments[i];\n            merge(obj);\n        }\n\n        return extended;\n\n    };\n\n    //\n    // Helpers\n    //\n\n    function parseQuery(query) {\n        var Params = new Object();\n        if (!query) return Params; // return empty object\n        var Pairs = query.split(/[;&]/);\n        for (var i = 0; i < Pairs.length; i++) {\n            var KeyVal = Pairs[i].split('=');\n            if (!KeyVal || KeyVal.length !== 2) continue;\n            var key = unescape(KeyVal[0]);\n            var val = unescape(KeyVal[1]);\n            val = val.replace(/\\+/g, ' ');\n            Params[key] = val;\n        }\n        return Params;\n    }\n\n    function objectLength(obj) {\n        var size = 0, key;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) size++;\n        }\n        return size;\n    };\n\n    function getSearchParameters() {\n        var prmstr = window.location.search.substr(1);\n        return prmstr !== null && prmstr !== \"\" ? transformToAssocArray(prmstr) : {};\n    }\n\n    function transformToAssocArray(prmstr) {\n        var params = [];\n        var prmarr = prmstr.split(\"&\");\n        for (var i = 0; i < prmarr.length; i++) {\n            var tmparr = prmarr[i].split(\"=\");\n            params.push({\n                'key': tmparr[0],\n                'value': tmparr[1]\n            });\n        }\n        return params;\n    }\n\n    function merge_objects(obj1, obj2) {\n        var obj3 = {};\n        for (var attrname1 in obj1) {\n            obj3[attrname1] = obj1[attrname1];\n        }\n        for (var attrname2 in obj2) {\n            obj3[attrname2] = obj2[attrname2];\n        }\n\n        return obj3;\n    }\n\n    //\n    // Constructor\n    // Can be named anything you want\n    //\n\n    var Constructor = function (options) {\n\n        //\n        // Unique Variables\n        //\n\n        var publicAPIs = {};\n        var settings;\n\n        function getPayload() {\n            var payload = {\n                \"url\": document.location.pathname || '/',\n                \"application\": settings.application\n            };\n\n            var payload_data = [];\n\n            if (navigator.language) payload_data.push({ \"key\": \"User-Language\", \"value\": navigator.language });\n            if (document.documentMode) payload_data.push({ \"key\": \"Document-Mode\", \"value\": document.documentMode });\n            if (window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth) payload_data.push({ \"key\": \"Browser-Width\", \"value\": window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth });\n            if (window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight) payload_data.push({ \"key\": \"Browser-Height\", \"value\": window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight });\n            if ((screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type) !== undefined) payload_data.push({ \"key\": \"Screen-Orientation\", \"value\": ((screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type).split(\"-\"))[0] });\n            if (screen.width) payload_data.push({ \"key\": \"Screen-Width\", \"value\": screen.width });\n            if (screen.height) payload_data.push({ \"key\": \"Screen-Height\", \"value\": screen.height });\n            if (screen.colorDepth) payload_data.push({ \"key\": \"Color-Depth\", \"value\": screen.colorDepth });\n            payload_data.push({ \"key\": \"X-ELMAHIO-SEARCH-isClientside\", \"value\": \"true\" });\n\n            payload.data = payload_data;\n\n            var payload_serverVariables = [];\n            if (navigator.userAgent) payload_serverVariables.push({ \"key\": \"User-Agent\", \"value\": navigator.userAgent });\n            if (document.referrer) payload_serverVariables.push({ \"key\": \"Referer\", \"value\": document.referrer });\n            if (document.location.protocol === \"https:\") payload_serverVariables.push({ \"key\": \"HTTPS\", \"value\": 'on' });\n            if (document.location.hostname) payload_serverVariables.push({ \"key\": \"Host\", \"value\": document.location.hostname });\n\n            payload.serverVariables = payload_serverVariables;\n\n            return payload;\n        }\n\n        function confirmResponse(status, response) {\n            if (settings.debug) {\n                if (status === 'error') {\n                    console.log('%c \\u2BC8 Error log: ' + '%c \\u2715 Not created ', debugSettings.lightCSS, debugSettings.errorCSS);\n                } else if (status === 'success') {\n                    console.log('%c \\u2BC8 Error log: ' + '%c \\u2714 ' + response + ' at ' + new Date().toLocaleString() + ' ', debugSettings.lightCSS, debugSettings.successCSS);\n                } else {\n                    console.log('%c \\u2BC8 Error log: ' + '%c \\u2715 Not created. Title should not be undefined, null or empty ! ', debugSettings.lightCSS, debugSettings.errorCSS);\n                }\n            }\n        }\n\n        function stackGPS(error, xhr, jsonData) {\n        \tvar errorStack = error.toString().split(\"\\n\")[0];\n        \tvar gps = new StackTraceGPS();\n            var promise = new Promise(function(resolve) {\n\t            var stackframes = ErrorStackParser.parse(error);\n\t            resolve(Promise.all(stackframes.map(function(sf) {\n\t                return new Promise(function(resolve) {\n\t                    function resolveOriginal() {\n\t                        resolve(sf);\n\t                    }\n\t                    gps.pinpoint(sf).then(resolve, resolveOriginal)['catch'](resolveOriginal);\n\t                });\n\t            })));\n            \t},\n            \tfunction(reject) {\n            \t\tconsole.log('pula');\n            \t}\n            );\n\n            promise.then(function(newFrames){\n            \tnewFrames.forEach(function(stackFrame, i){\n\t\t\tif(stackFrame.functionName) {\n            \t\t\tvar fn = stackFrame.functionName + ' ';\n            \t\t} else {\n            \t\t\tvar fn = '';\n            \t\t}\n            \t\tvar stackString = '    at ' + fn + '(' + stackFrame.fileName + ':' + stackFrame.lineNumber + ':' + stackFrame.columnNumber + ')';\n            \t\tnewFrames[i] = stackString;\n            \t});\n            \tnewFrames.unshift(errorStack);\n            \tjsonData.detail = newFrames.join(\"\\n\");\n            \txhr.send(JSON.stringify(jsonData));\n            });\n\n        }\n\n        // Private methods\n\n        var sendPayload = function (apiKey, logId, callback, errorLog) {\n            var api_key = apiKey,\n                log_id = logId,\n                error = errorLog,\n                send = 1,\n                queryParams = getSearchParameters(),\n                stack = error.error ? ErrorStackParser.parse(error.error) : '';\n\n            if ((api_key !== null && log_id !== null) || (paramsLength === 2)) {\n\n                // Priority for parameters\n                if (params.hasOwnProperty('apiKey') && params.hasOwnProperty('logId')) {\n                    api_key = params['apiKey'];\n                    log_id = params['logId'];\n                }\n\n                // get new XHR object\n                var xhr = new XMLHttpRequest();\n                xhr.open(\"POST\", \"https://api.elmah.io/v3/messages/\" + log_id + \"?api_key=\" + api_key, true);\n\n                xhr.setRequestHeader('Content-type', 'application/json');\n\n                xhr.onload = function (e) {\n                    if (xhr.readyState === 4) {\n                        if (xhr.status === 201) {\n                            callback('success', xhr.statusText);\n                        }\n                    }\n                };\n\n                xhr.onerror = function (e) {\n                    callback('error', xhr.statusText);\n\n                    // on error event\n                    publicAPIs.emit('error', xhr.status, xhr.statusText);\n                }\n\n                var jsonData = {\n                    \"detail\": error.error ? error.error.stack : null,\n                    \"title\": error.message || 'Unspecified error',\n                    \"source\": stack && stack.length > 0 ? stack[0].fileName : null,\n                    \"severity\": \"Error\",\n                    \"type\": error.error ? error.error.name : null,\n                    \"queryString\": JSON.parse(JSON.stringify(queryParams))\n                };\n\n                // Add payload to jsonData\n                jsonData = merge_objects(jsonData, getPayload());\n\n                // filter callback\n                if (settings.filter !== null) {\n                    if (settings.filter(jsonData)) {\n                        send = 0;\n                    }\n                }\n\n                if (send === 1) {\n                    // on message event\n                    publicAPIs.emit('message', jsonData);\n\n                    if (error.error && typeof Promise !== \"undefined\" && Promise.toString().indexOf(\"[native code]\") !== -1) {\n                    \t// send message trying to pinpoint stackframes\n                    \tstackGPS(error.error, xhr, jsonData);\n\t                } else {\n\t                \t// send message\n                    \txhr.send(JSON.stringify(jsonData));\n\t                }\n                }\n\n            } else {\n                return console.log('Login api error');\n            }\n        };\n\n        var sendManualPayload = function (apiKey, logId, callback, logType, messageLog, errorLog) {\n            var api_key = apiKey,\n                log_id = logId,\n                type = logType,\n                error = errorLog,\n                message = messageLog,\n                send = 1,\n                queryParams = getSearchParameters();\n\n            if ((api_key !== null && log_id !== null) || (paramsLength === 2)) {\n\n                // Priority for parameters\n                if (params.hasOwnProperty('apiKey') && params.hasOwnProperty('logId')) {\n                    api_key = params['apiKey'];\n                    log_id = params['logId'];\n                }\n\n                // get new XHR object\n                var xhr = new XMLHttpRequest();\n                xhr.open(\"POST\", \"https://api.elmah.io/v3/messages/\" + log_id + \"?api_key=\" + api_key, true);\n                xhr.setRequestHeader('Content-type', 'application/json');\n\n                xhr.onload = function (e) {\n                    if (xhr.readyState === 4) {\n                        if (xhr.status === 201) {\n                            callback('success', xhr.statusText);\n                        }\n                    }\n                };\n\n                xhr.onerror = function (e) {\n                    callback('error', xhr.statusText);\n\n                    // on error event\n                    publicAPIs.emit('error', xhr.status, xhr.statusText);\n                }\n\n                if (type !== \"Log\") {\n\n                    var stack = error ? ErrorStackParser.parse(error) : null;\n\n                    var jsonData = {\n                        \"title\": message,\n                        \"source\": stack && stack.length > 0 ? stack[0].fileName : null,\n                        \"detail\": error ? error.stack : null,\n                        \"severity\": type,\n                        \"type\": error ? error.name : null,\n                        \"queryString\": JSON.parse(JSON.stringify(queryParams))\n                    };\n\n                    // Add payload to jsonData\n                    jsonData = merge_objects(jsonData, getPayload());\n\n                } else {\n\n                    jsonData = error;\n\n                }\n\n                // filter callback\n                if (settings.filter !== null) {\n                    if (settings.filter(jsonData)) {\n                        send = 0;\n                    }\n                }\n\n                if (send === 1) {\n                    if (jsonData.title) {\n\n                        // on message event\n                        publicAPIs.emit('message', jsonData);\n\n                        if (error && type !== \"Log\" && typeof Promise !== \"undefined\" && Promise.toString().indexOf(\"[native code]\") !== -1) {\n\t    \t\t\t\t\t// send message trying to pinpoint stackframes\n                    \t\tstackGPS(error, xhr, jsonData);\n\t\t                } else {\n\t\t                \t// send message\n\t                    \txhr.send(JSON.stringify(jsonData));\n\t\t                }\n\n                    } else {\n                        callback('missing-title', xhr.statusText);\n                    }\n                }\n\n            } else {\n                return console.log('Login api error');\n            }\n        };\n\n        // Some public methods\n\n        publicAPIs.error = function (msg) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Error', msg);\n        };\n        publicAPIs.error = function (msg, error) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Error', msg, error);\n        };\n\n        publicAPIs.verbose = function (msg) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Verbose', msg);\n        };\n        publicAPIs.verbose = function (msg, error) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Verbose', msg, error);\n        };\n\n        publicAPIs.debug = function (msg) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Debug', msg);\n        };\n        publicAPIs.debug = function (msg, error) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Debug', msg, error);\n        };\n\n        publicAPIs.information = function (msg) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Information', msg);\n        };\n        publicAPIs.information = function (msg, error) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Information', msg, error);\n        };\n\n        publicAPIs.warning = function (msg) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Warning', msg);\n        };\n        publicAPIs.warning = function (msg, error) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Warning', msg, error);\n        };\n\n        publicAPIs.fatal = function (msg) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Fatal', msg);\n        };\n        publicAPIs.fatal = function (msg, error) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Fatal', msg, error);\n        };\n\n        publicAPIs.log = function (obj) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Log', null, obj);\n        };\n\n        publicAPIs.on = function (name, callback, ctx) {\n            var e = this.e || (this.e = {});\n\n            (e[name] || (e[name] = [])).push({\n                fn: callback,\n                ctx: ctx\n            });\n\n            return this;\n        };\n\n        publicAPIs.emit = function (name) {\n            var data = [].slice.call(arguments, 1);\n            var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n            var i = 0;\n            var len = evtArr.length;\n\n            for (i; i < len; i++) {\n                evtArr[i].fn.apply(evtArr[i].ctx, data);\n            }\n\n            return this;\n        };\n\n        publicAPIs.init = function (options) {\n\n            // Merge options into defaults\n            settings = extend(defaults, options || {});\n\n            // Code goes here...\n            window.onerror = function (message, source, lineno, colno, error) {\n\n                var errorLog = {\n                    'message': message,\n                    'source': source,\n                    'lineno': lineno,\n                    'colno': colno,\n                    'error': error\n                }\n\n                sendPayload(settings.apiKey, settings.logId, confirmResponse, errorLog);\n\n                return false;\n            }\n\n        };\n\n        // Initialize the plugin\n        publicAPIs.init(options);\n\n        if (settings.debug) {\n            console.log('%c' + debugSettings.label, debugSettings.labelCSS);\n        }\n\n        // Return the public APIs\n        return publicAPIs;\n\n    };\n\n\n    //\n    // Return the constructor\n    //\n\n    if (paramsLength && params.hasOwnProperty('apiKey') && params.hasOwnProperty('logId')) {\n        // Immediately-Invoked Function Expression (IIFE)\n        return new Constructor;\n    } else {\n        // UMD Constructor\n        return Constructor;\n    }\n\n});\n"],"file":"elmahio.js"}