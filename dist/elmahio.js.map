{"version":3,"names":[],"mappings":"","sources":["elmahio.js"],"sourcesContent":["/*!\r\n * elmah.io Javascript Logger - version 3.0.0\r\n * (c) 2018 elmah.io, Apache 2.0 License, https://elmah.io\r\n */\r\n(function (root, factory) {\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine([], function () {\r\n\t\t\treturn factory(root);\r\n\t\t});\r\n\t} else if (typeof exports === 'object') {\r\n\t\tmodule.exports = factory(root);\r\n\t} else {\r\n\t\troot.Elmahio = factory(root);\r\n\t}\r\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\r\n\r\n\t'use strict';\r\n\r\n\t//\r\n\t// Shared Variables\r\n\t//\r\n\r\n\tvar scriptFile = document.getElementsByTagName('script');\r\n\tvar\tscriptIndex = scriptFile.length - 1;\r\n\tvar\tmyScript = scriptFile[scriptIndex];\r\n\tvar\tqueryString = myScript.src.replace(/^[^\\?]+\\??/, '');\r\n\tvar\tparams = parseQuery(queryString);\r\n\tvar\tparamsLength = objectLength(params);\r\n\r\n\tvar debugSettings = {\r\n\t\tlabel: ' elmah.io debugger : On ',\r\n\t\tlabelCSS: 'background: #06a89c; color: #ffffff; display: inline-block; font-size: 14px;',\r\n\t\tsuccessCSS: 'background: #d4edda; color: #155724; display: inline-block; font-size: 13px;',\r\n\t\terrorCSS: 'background: #f8d7da; color: #721c24; display: inline-block; font-size: 13px;',\r\n\t\twarningCSS: 'background: #fff3cd; color: #856404; display: inline-block; font-size: 13px;',\r\n\t\tlightCSS: 'background: #e2e3e5; color: #383d41; display: inline-block; font-size: 13px;'\r\n\t};\r\n\r\n\tvar defaults = {\r\n\t\tapiKey: null,\r\n\t\tlogId: null,\r\n\t\tdebug: false,\r\n\t\tapplication: null,\r\n\t\tonMessage: null,\r\n\t\tonError: null,\r\n\t\tonFilter: null\r\n\t};\r\n\r\n\t//\r\n\t// Shared Methods\r\n\t//\r\n\r\n\tvar extend = function () {\r\n\r\n\t\t// Variables\r\n\t\tvar extended = {};\r\n\t\tvar deep = false;\r\n\t\tvar i = 0;\r\n\r\n\t\t// Check if a deep merge\r\n\t\tif (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\r\n\t\t\tdeep = arguments[0];\r\n\t\t\ti++;\r\n\t\t}\r\n\r\n\t\t// Merge the object into the extended object\r\n\t\tvar merge = function (obj) {\r\n\t\t\tfor (var prop in obj) {\r\n\t\t\t\tif (obj.hasOwnProperty(prop)) {\r\n\t\t\t\t\t// If property is an object, merge properties\r\n\t\t\t\t\tif (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\r\n\t\t\t\t\t\textended[prop] = extend(extended[prop], obj[prop]);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\textended[prop] = obj[prop];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Loop through each object and conduct a merge\r\n\t\tfor (; i < arguments.length; i++) {\r\n\t\t\tvar obj = arguments[i];\r\n\t\t\tmerge(obj);\r\n\t\t}\r\n\r\n\t\treturn extended;\r\n\r\n\t};\r\n\r\n\t//\r\n\t// Helpers\r\n\t//\r\n\r\n\tfunction parseQuery(query) {\r\n\t\tvar Params = new Object();\r\n\t\tif (!query) return Params; // return empty object\r\n\t\tvar Pairs = query.split(/[;&]/);\r\n\t\tfor (var i = 0; i < Pairs.length; i++) {\r\n\t\t\tvar KeyVal = Pairs[i].split('=');\r\n\t\t\tif (!KeyVal || KeyVal.length != 2) continue;\r\n\t\t\tvar key = unescape(KeyVal[0]);\r\n\t\t\tvar val = unescape(KeyVal[1]);\r\n\t\t\tval = val.replace(/\\+/g, ' ');\r\n\t\t\tParams[key] = val;\r\n\t\t}\r\n\t\treturn Params;\r\n\t}\r\n\r\n\tfunction objectLength(obj) {\r\n\t\tvar size = 0, key;\r\n\t\tfor (key in obj) {\r\n\t\t\tif (obj.hasOwnProperty(key)) size++;\r\n\t\t}\r\n\t\treturn size;\r\n\t};\r\n\r\n\tfunction getSearchParameters() {\r\n\t\tvar prmstr = window.location.search.substr(1);\r\n\t\treturn prmstr != null && prmstr != \"\" ? transformToAssocArray(prmstr) : {};\r\n\t}\r\n\r\n\tfunction transformToAssocArray(prmstr) {\r\n\t\tvar params = [];\r\n\t\tvar prmarr = prmstr.split(\"&\");\r\n\t\tfor (var i = 0; i < prmarr.length; i++) {\r\n\t\t\tvar tmparr = prmarr[i].split(\"=\");\r\n\t\t\tparams.push({\r\n\t\t\t\t'key': tmparr[0],\r\n\t\t\t\t'value': tmparr[1]\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn params;\r\n\t}\r\n\r\n\tfunction merge_objects(obj1, obj2) {\r\n\t\tvar obj3 = {};\r\n\t\tfor (var attrname in obj1) {\r\n\t\t\tobj3[attrname] = obj1[attrname];\r\n\t\t}\r\n\t\tfor (var attrname in obj2) {\r\n\t\t\tobj3[attrname] = obj2[attrname];\r\n\t\t}\r\n\r\n\t\treturn obj3;\r\n\t}\r\n\r\n\tfunction ErrorStackParser(settings) {\r\n\t\t'use strict';\r\n\r\n\t\tvar FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+\\:\\d+/;\r\n\t\tvar CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+\\:\\d+|\\(native\\))/m;\r\n\t\tvar SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code\\])?$/;\r\n\r\n\t\treturn {\r\n\t\t\tparse: function (error) {\r\n\t\t\t\tif (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {\r\n\t\t\t\t\treturn this.parseOpera(error);\r\n\t\t\t\t} else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\r\n\t\t\t\t\treturn this.parseV8OrIE(error);\r\n\t\t\t\t} else if (error.stack) {\r\n\t\t\t\t\treturn this.parseFFOrSafari(error);\r\n\t\t\t\t} else if (settings.debug) {\r\n\t\t\t\t\tconsole.log('%c Cannot parse given Error object', debugSettings.warningCSS);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Separate line and column numbers from a string of the form: (URI:Line:Column)\r\n\t\t\textractLocation: function ErrorStackParser$$extractLocation(urlLike) {\r\n\t\t\t\t// Fail-fast but return locations like \"(native)\"\r\n\t\t\t\tif (urlLike.indexOf(':') === -1) {\r\n\t\t\t\t\treturn [urlLike];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar regExp = /(.+?)(?:\\:(\\d+))?(?:\\:(\\d+))?$/;\r\n\t\t\t\tvar parts = regExp.exec(urlLike.replace(/[\\(\\)]/g, ''));\r\n\t\t\t\treturn [parts[1], parts[2] || undefined, parts[3] || undefined];\r\n\t\t\t},\r\n\r\n\t\t\tparseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {\r\n\t\t\t\tvar filtered = error.stack.split('\\n').filter(function (line) {\r\n\t\t\t\t\treturn !!line.match(CHROME_IE_STACK_REGEXP);\r\n\t\t\t\t}, this);\r\n\r\n\t\t\t\treturn filtered.map(function (line) {\r\n\t\t\t\t\tif (line.indexOf('(eval ') > -1) {\r\n\t\t\t\t\t\t// Throw away eval information until we implement stacktrace.js/stackframe#8\r\n\t\t\t\t\t\tline = line.replace(/eval code/g, 'eval').replace(/(\\(eval at [^\\()]*)|(\\)\\,.*$)/g, '');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar tokens = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '(').split(/\\s+/).slice(1);\r\n\t\t\t\t\tvar locationParts = this.extractLocation(tokens.pop());\r\n\t\t\t\t\tvar functionName = tokens.join(' ') || undefined;\r\n\t\t\t\t\tvar fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];\r\n\r\n\t\t\t\t\treturn ({\r\n\t\t\t\t\t\tfunctionName: functionName,\r\n\t\t\t\t\t\tfileName: fileName,\r\n\t\t\t\t\t\tlineNumber: locationParts[1],\r\n\t\t\t\t\t\tcolumnNumber: locationParts[2],\r\n\t\t\t\t\t\tsource: line\r\n\t\t\t\t\t});\r\n\t\t\t\t}, this);\r\n\t\t\t},\r\n\r\n\t\t\tparseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {\r\n\t\t\t\tvar filtered = error.stack.split('\\n').filter(function (line) {\r\n\t\t\t\t\treturn !line.match(SAFARI_NATIVE_CODE_REGEXP);\r\n\t\t\t\t}, this);\r\n\r\n\t\t\t\treturn filtered.map(function (line) {\r\n\t\t\t\t\t// Throw away eval information until we implement stacktrace.js/stackframe#8\r\n\t\t\t\t\tif (line.indexOf(' > eval') > -1) {\r\n\t\t\t\t\t\tline = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval\\:\\d+\\:\\d+/g, ':$1');\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\r\n\t\t\t\t\t\t// Safari eval frames only have function names and nothing else\r\n\t\t\t\t\t\treturn ({\r\n\t\t\t\t\t\t\tfunctionName: line\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\r\n\t\t\t\t\t\tvar matches = line.match(functionNameRegex);\r\n\t\t\t\t\t\tvar functionName = matches && matches[1] ? matches[1] : undefined;\r\n\t\t\t\t\t\tvar locationParts = this.extractLocation(line.replace(functionNameRegex, ''));\r\n\r\n\t\t\t\t\t\treturn ({\r\n\t\t\t\t\t\t\tfunctionName: functionName,\r\n\t\t\t\t\t\t\tfileName: locationParts[0],\r\n\t\t\t\t\t\t\tlineNumber: locationParts[1],\r\n\t\t\t\t\t\t\tcolumnNumber: locationParts[2],\r\n\t\t\t\t\t\t\tsource: line\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\t\t},\r\n\r\n\t\t\tparseOpera: function ErrorStackParser$$parseOpera(e) {\r\n\t\t\t\tif (!e.stacktrace || (e.message.indexOf('\\n') > -1 &&\r\n\t\t\t\t\te.message.split('\\n').length > e.stacktrace.split('\\n').length)) {\r\n\t\t\t\t\treturn this.parseOpera9(e);\r\n\t\t\t\t} else if (!e.stack) {\r\n\t\t\t\t\treturn this.parseOpera10(e);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.parseOpera11(e);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tparseOpera9: function ErrorStackParser$$parseOpera9(e) {\r\n\t\t\t\tvar lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\r\n\t\t\t\tvar lines = e.message.split('\\n');\r\n\t\t\t\tvar result = [];\r\n\r\n\t\t\t\tfor (var i = 2, len = lines.length; i < len; i += 2) {\r\n\t\t\t\t\tvar match = lineRE.exec(lines[i]);\r\n\t\t\t\t\tif (match) {\r\n\t\t\t\t\t\tresult.push(({\r\n\t\t\t\t\t\t\tfileName: match[2],\r\n\t\t\t\t\t\t\tlineNumber: match[1],\r\n\t\t\t\t\t\t\tsource: lines[i]\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn result;\r\n\t\t\t},\r\n\r\n\t\t\tparseOpera10: function ErrorStackParser$$parseOpera10(e) {\r\n\t\t\t\tvar lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\r\n\t\t\t\tvar lines = e.stacktrace.split('\\n');\r\n\t\t\t\tvar result = [];\r\n\r\n\t\t\t\tfor (var i = 0, len = lines.length; i < len; i += 2) {\r\n\t\t\t\t\tvar match = lineRE.exec(lines[i]);\r\n\t\t\t\t\tif (match) {\r\n\t\t\t\t\t\tresult.push(\r\n\t\t\t\t\t\t\t({\r\n\t\t\t\t\t\t\t\tfunctionName: match[3] || undefined,\r\n\t\t\t\t\t\t\t\tfileName: match[2],\r\n\t\t\t\t\t\t\t\tlineNumber: match[1],\r\n\t\t\t\t\t\t\t\tsource: lines[i]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn result;\r\n\t\t\t},\r\n\r\n\t\t\t// Opera 10.65+ Error.stack very similar to FF/Safari\r\n\t\t\tparseOpera11: function ErrorStackParser$$parseOpera11(error) {\r\n\t\t\t\tvar filtered = error.stack.split('\\n').filter(function (line) {\r\n\t\t\t\t\treturn !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);\r\n\t\t\t\t}, this);\r\n\r\n\t\t\t\treturn filtered.map(function (line) {\r\n\t\t\t\t\tvar tokens = line.split('@');\r\n\t\t\t\t\tvar locationParts = this.extractLocation(tokens.pop());\r\n\t\t\t\t\tvar functionCall = (tokens.shift() || '');\r\n\t\t\t\t\tvar functionName = functionCall\r\n\t\t\t\t\t\t.replace(/<anonymous function(: (\\w+))?>/, '$2')\r\n\t\t\t\t\t\t.replace(/\\([^\\)]*\\)/g, '') || undefined;\r\n\t\t\t\t\tvar argsRaw;\r\n\t\t\t\t\tif (functionCall.match(/\\(([^\\)]*)\\)/)) {\r\n\t\t\t\t\t\targsRaw = functionCall.replace(/^[^\\(]+\\(([^\\)]*)\\)$/, '$1');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar args = (argsRaw === undefined || argsRaw === '[arguments not available]') ?\r\n\t\t\t\t\t\tundefined : argsRaw.split(',');\r\n\r\n\t\t\t\t\treturn ({\r\n\t\t\t\t\t\tfunctionName: functionName,\r\n\t\t\t\t\t\targs: args,\r\n\t\t\t\t\t\tfileName: locationParts[0],\r\n\t\t\t\t\t\tlineNumber: locationParts[1],\r\n\t\t\t\t\t\tcolumnNumber: locationParts[2],\r\n\t\t\t\t\t\tsource: line\r\n\t\t\t\t\t});\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t}\r\n\r\n\r\n\t//\r\n\t// Constructor\r\n\t// Can be named anything you want\r\n\t//\r\n\r\n\tvar Constructor = function (options) {\r\n\r\n\t\t//\r\n\t\t// Unique Variables\r\n\t\t//\r\n\r\n\t\tvar publicAPIs = {};\r\n\t\tvar settings;\r\n\r\n\t\tfunction getPayload() {\r\n\t\t\tvar payload = {\r\n\t\t\t\t\"url\": [document.location.protocol, '//', document.location.host, document.location.pathname, document.location.hash].join('') || '/',\r\n\t\t\t\t\"application\": settings.application\r\n\t\t\t};\r\n\r\n\t\t\tvar payload_data = [];\r\n\r\n\t\t\tif (navigator.language) payload_data.push({ \"key\": \"User-Language\", \"value\": navigator.language });\r\n\t\t\tif (document.documentMode) payload_data.push({ \"key\": \"Document-Mode\", \"value\": document.documentMode });\r\n\t\t\tif (window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth) payload_data.push({ \"key\": \"Browser-Width\", \"value\": window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth });\r\n\t\t\tif (window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight) payload_data.push({ \"key\": \"Browser-Height\", \"value\": window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight });\r\n\t\t\tif ((screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type) != undefined) payload_data.push({ \"key\": \"Screen-Orientation\", \"value\": ((screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type).split(\"-\"))[0] });\r\n\t\t\tif (screen.width) payload_data.push({ \"key\": \"Screen-Width\", \"value\": screen.width });\r\n\t\t\tif (screen.height) payload_data.push({ \"key\": \"Screen-Height\", \"value\": screen.height });\r\n\t\t\tif (screen.colorDepth) payload_data.push({ \"key\": \"Color-Depth\", \"value\": screen.colorDepth });\r\n\t\t\tpayload_data.push({ \"key\": \"X-ELMAHIO-SEARCH-isClientside\", \"value\": \"true\" });\r\n\r\n\t\t\tpayload.data = payload_data;\r\n\r\n\t\t\tvar payload_serverVariables = [];\r\n\t\t\tif (navigator.userAgent) payload_serverVariables.push({ \"key\": \"User-Agent\", \"value\": navigator.userAgent });\r\n\t\t\tif (document.referrer) payload_serverVariables.push({ \"key\": \"Referer\", \"value\": document.referrer });\r\n\r\n\t\t\tpayload.serverVariables = payload_serverVariables;\r\n\r\n\t\t\treturn payload;\r\n\t\t}\r\n\r\n\t\tfunction confirmResponse(status, response) {\r\n\t\t\tif (settings.debug) {\r\n\t\t\t\tif(status === 'error') {\r\n\t\t\t\t\tconsole.log('%c \\u2BC8 Error log: ' + '%c \\u2715 Not created ', debugSettings.lightCSS, debugSettings.errorCSS);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log('%c \\u2BC8 Error log: ' + '%c \\u2714 ' + response + ' at ' + new Date().toLocaleString() + ' ', debugSettings.lightCSS, debugSettings.successCSS);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t//\r\n\t\t// Unique Methods\r\n\t\t//\r\n\r\n\t\t/**\r\n\t\t * A private method\r\n\t\t */\r\n\t\tvar sendPayload = function (apiKey, logId, callback, errorLog) {\r\n\t\t\tvar api_key = apiKey,\r\n\t\t\t\tlog_id = logId,\r\n\t\t\t\terror = errorLog,\r\n\t\t\t\tsend = 1,\r\n\t\t\t\tqueryParams = getSearchParameters();\r\n\r\n\t\t\tif ((api_key !== null && log_id !== null) || (paramsLength === 2)) {\r\n\r\n\t\t\t\t// Priority for parameters\r\n\t\t\t\tif (params.hasOwnProperty('apiKey') && params.hasOwnProperty('logId')) {\r\n\t\t\t\t\tapi_key = params['apiKey'];\r\n\t\t\t\t\tlog_id = params['logId'];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// get new XHR object\r\n\t\t\t\tvar xhr = new XMLHttpRequest();\r\n\t\t\t\txhr.open(\"POST\", \"https://api.elmah.io/v3/messages/\" + log_id + \"?api_key=\" + api_key, true);\r\n\t\t\t\txhr.setRequestHeader('Content-type', 'application/json');\r\n\r\n\t\t\t\txhr.onload = function (e) {\r\n\t\t\t\t\tif (xhr.readyState === 4) {\r\n\t\t\t\t\t\tif (xhr.status === 201) {\r\n\t\t\t\t\t\t\tcallback('success', xhr.statusText);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\txhr.onerror = function (e) {\r\n\t\t\t\t\tcallback('error', xhr.statusText);\r\n\r\n\t\t\t\t\t// onError callback\r\n\t\t\t\t\tif (settings.onError !== null) {\r\n\t\t\t\t\t\tsettings.onError(xhr.status, xhr.statusText);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar stack = ErrorStackParser(settings).parse(error.error);\r\n\r\n\t\t\t\tvar jsonData = {\r\n\t\t\t\t\t\"detail\": error.error.stack,\r\n\t\t\t\t\t\"title\": error.message,\r\n\t\t\t\t\t\"source\": stack && stack.length > 0 ? stack[0].fileName : null,\r\n\t\t\t\t\t\"severity\": \"Error\",\r\n\t\t\t\t\t\"type\": error.error.name,\r\n\t\t\t\t\t\"queryString\": JSON.parse(JSON.stringify(queryParams))\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Add payload to jsonData\r\n\t\t\t\tjsonData = merge_objects(jsonData, getPayload());\r\n\r\n\t\t\t\t// onFilter callback\r\n\t\t\t\tif (settings.onFilter !== null) {\r\n\t\t\t\t\tif (settings.onFilter(jsonData)) {\r\n\t\t\t\t\t\tsend = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// onMessage callback\r\n\t\t\t\tif (settings.onMessage !== null) {\r\n\t\t\t\t\tsettings.onMessage(jsonData);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (send === 1) {\r\n\t\t\t\t\txhr.send(JSON.stringify(jsonData));\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn console.log('Login api error');\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar sendManualPayload = function (apiKey, logId, callback, logType, messageLog, errorLog) {\r\n\t\t\tvar api_key = apiKey,\r\n\t\t\t\tlog_id = logId,\r\n\t\t\t\ttype = logType,\r\n\t\t\t\terror = errorLog,\r\n\t\t\t\tmessage = messageLog,\r\n\t\t\t\tsend = 1,\r\n\t\t\t\tqueryParams = getSearchParameters();\r\n\r\n\t\t\tif ((api_key !== null && log_id !== null) || (paramsLength === 2)) {\r\n\r\n\t\t\t\t// Priority for parameters\r\n\t\t\t\tif (params.hasOwnProperty('apiKey') && params.hasOwnProperty('logId')) {\r\n\t\t\t\t\tapi_key = params['apiKey'];\r\n\t\t\t\t\tlog_id = params['logId'];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// get new XHR object\r\n\t\t\t\tvar xhr = new XMLHttpRequest();\r\n\t\t\t\txhr.open(\"POST\", \"https://api.elmah.io/v3/messages/\" + log_id + \"?api_key=\" + api_key, true);\r\n\t\t\t\txhr.setRequestHeader('Content-type', 'application/json');\r\n\r\n\t\t\t\txhr.onload = function (e) {\r\n\t\t\t\t\tif (xhr.readyState === 4) {\r\n\t\t\t\t\t\tif (xhr.status === 201) {\r\n\t\t\t\t\t\t\tcallback('success', xhr.statusText);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\txhr.onerror = function (e) {\r\n\t\t\t\t\tcallback('error', xhr.statusText);\r\n\r\n\t\t\t\t\t// onError callback\r\n\t\t\t\t\tif (settings.onError !== null) {\r\n\t\t\t\t\t\tsettings.onError(xhr.status, xhr.statusText);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar stack = error ? ErrorStackParser(settings).parse(error) : null;\r\n\r\n\t\t\t\tvar jsonData = {\r\n\t\t\t\t\t\"title\": message,\r\n\t\t\t\t\t\"source\": stack && stack.length > 0 ? stack[0].fileName : null,\r\n\t\t\t\t\t\"detail\": error ? error.stack : null,\r\n\t\t\t\t\t\"severity\": type,\r\n\t\t\t\t\t\"type\": error ? error.name : null,\r\n\t\t\t\t\t\"queryString\": JSON.parse(JSON.stringify(queryParams))\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Add payload to jsonData\r\n\t\t\t\tjsonData = merge_objects(jsonData, getPayload());\r\n\r\n\t\t\t\t// onFilter callback\r\n\t\t\t\tif (settings.onFilter !== null) {\r\n\t\t\t\t\tif (settings.onFilter(jsonData)) {\r\n\t\t\t\t\t\tsend = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// onMessage callback\r\n\t\t\t\tif (settings.onMessage !== null) {\r\n\t\t\t\t\tsettings.onMessage(jsonData);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (send === 1) {\r\n\t\t\t\t\txhr.send(JSON.stringify(jsonData));\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn console.log('Login api error');\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Some public methods\r\n\t\t */\r\n\t\tpublicAPIs.error = function (msg) {\r\n\t\t\tsendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Error', msg);\r\n\t\t};\r\n\t\tpublicAPIs.error = function (msg, error) {\r\n\t\t\tsendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Error', msg, error);\r\n\t\t};\r\n\r\n\t\tpublicAPIs.verbose = function (msg) {\r\n\t\t\tsendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Verbose', msg);\r\n\t\t};\r\n\t\tpublicAPIs.verbose = function (msg, error) {\r\n\t\t\tsendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Verbose', msg, error);\r\n\t\t};\r\n\r\n\t\tpublicAPIs.debug = function (msg) {\r\n\t\t\tsendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Debug', msg);\r\n\t\t};\r\n\t\tpublicAPIs.debug = function (msg, error) {\r\n\t\t\tsendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Debug', msg, error);\r\n\t\t};\r\n\r\n\t\tpublicAPIs.information = function (msg) {\r\n\t\t\tsendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Information', msg);\r\n\t\t};\r\n\t\tpublicAPIs.information = function (msg, error) {\r\n\t\t\tsendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Information', msg, error);\r\n\t\t};\r\n\r\n\t\tpublicAPIs.warning = function (msg) {\r\n\t\t\tsendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Warning', msg);\r\n\t\t};\r\n\t\tpublicAPIs.warning = function (msg, error) {\r\n\t\t\tsendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Warning', msg, error);\r\n\t\t};\r\n\r\n\t\tpublicAPIs.fatal = function (msg) {\r\n\t\t\tsendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Fatal', msg);\r\n\t\t};\r\n\t\tpublicAPIs.fatal = function (msg, error) {\r\n\t\t\tsendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Fatal', msg, error);\r\n\t\t};\r\n\r\n\t\tpublicAPIs.log = function (msg) {\r\n\t\t\tsendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Log function', msg);\r\n\t\t};\r\n\t\tpublicAPIs.log = function (msg, error) {\r\n\t\t\tsendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Log function', msg, error);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Another public method\r\n\t\t */\r\n\t\tpublicAPIs.init = function (options) {\r\n\r\n\t\t\t// Merge options into defaults\r\n\t\t\tsettings = extend(defaults, options || {});\r\n\r\n\t\t\t// Code goes here...\r\n\t\t\twindow.onerror = function (message, source, lineno, colno, error) {\r\n\r\n\t\t\t\tvar errorLog = {\r\n\t\t\t\t\t'message': message,\r\n\t\t\t\t\t'source': source,\r\n\t\t\t\t\t'lineno': lineno,\r\n\t\t\t\t\t'colno': colno,\r\n\t\t\t\t\t'error': error\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsendPayload(settings.apiKey, settings.logId, confirmResponse, errorLog);\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t// Initialize the plugin\r\n\t\tpublicAPIs.init(options);\r\n\r\n\t\tif (settings.debug) {\r\n\t\t\tconsole.log('%c' + debugSettings.label, debugSettings.labelCSS);\r\n\t\t}\r\n\r\n\t\t// Return the public APIs\r\n\t\treturn publicAPIs;\r\n\r\n\t};\r\n\r\n\r\n\t//\r\n\t// Return the constructor\r\n\t//\r\n\r\n\tif (paramsLength && params.hasOwnProperty('apiKey') && params.hasOwnProperty('logId')) {\r\n\t\t// Immediately-Invoked Function Expression (IIFE)\r\n\t\treturn new Constructor;\r\n\t} else {\r\n\t\t// UMD Constructor\r\n\t\treturn Constructor;\r\n\t}\r\n\r\n});\r\n"],"file":"elmahio.js"}