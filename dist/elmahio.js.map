{"version":3,"names":[],"mappings":"","sources":["elmahio.js"],"sourcesContent":["/*!\n * elmah.io Javascript Logger - version 3.0.0-beta1\n * (c) 2018 elmah.io, Apache 2.0 License, https://elmah.io\n */\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return factory(root);\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory(root);\n    } else {\n        root.Elmahio = factory(root);\n    }\n})(typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : this, function (window) {\n\n    'use strict';\n\n    //\n    // Shared Variables\n    //\n\n    var scriptFile = document.getElementsByTagName('script');\n    var scriptIndex = scriptFile.length - 1;\n    var myScript = scriptFile[scriptIndex];\n    var queryString = myScript.src.replace(/^[^\\?]+\\??/, '');\n    var params = parseQuery(queryString);\n    var paramsLength = objectLength(params);\n\n    var debugSettings = {\n        label: ' elmah.io debugger : On ',\n        labelCSS: 'background: #06a89c; color: #ffffff; display: inline-block; font-size: 14px;',\n        successCSS: 'background: #d4edda; color: #155724; display: inline-block; font-size: 13px;',\n        errorCSS: 'background: #f8d7da; color: #721c24; display: inline-block; font-size: 13px;',\n        warningCSS: 'background: #fff3cd; color: #856404; display: inline-block; font-size: 13px;',\n        lightCSS: 'background: #e2e3e5; color: #383d41; display: inline-block; font-size: 13px;'\n    };\n\n    var defaults = {\n        apiKey: null,\n        logId: null,\n        debug: false,\n        application: null,\n        onFilter: null\n    };\n\n    //\n    // Shared Methods\n    //\n\n    var extend = function () {\n\n        // Variables\n        var extended = {};\n        var deep = false;\n        var i = 0;\n\n        // Check if a deep merge\n        if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n            deep = arguments[0];\n            i++;\n        }\n\n        // Merge the object into the extended object\n        var merge = function (obj) {\n            for (var prop in obj) {\n                if (obj.hasOwnProperty(prop)) {\n                    // If property is an object, merge properties\n                    if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n                        extended[prop] = extend(extended[prop], obj[prop]);\n                    } else {\n                        extended[prop] = obj[prop];\n                    }\n                }\n            }\n        };\n\n        // Loop through each object and conduct a merge\n        for (; i < arguments.length; i++) {\n            var obj = arguments[i];\n            merge(obj);\n        }\n\n        return extended;\n\n    };\n\n    //\n    // Helpers\n    //\n\n    function parseQuery(query) {\n        var Params = new Object();\n        if (!query) return Params; // return empty object\n        var Pairs = query.split(/[;&]/);\n        for (var i = 0; i < Pairs.length; i++) {\n            var KeyVal = Pairs[i].split('=');\n            if (!KeyVal || KeyVal.length !== 2) continue;\n            var key = unescape(KeyVal[0]);\n            var val = unescape(KeyVal[1]);\n            val = val.replace(/\\+/g, ' ');\n            Params[key] = val;\n        }\n        return Params;\n    }\n\n    function objectLength(obj) {\n        var size = 0, key;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) size++;\n        }\n        return size;\n    };\n\n    function getSearchParameters() {\n        var prmstr = window.location.search.substr(1);\n        return prmstr !== null && prmstr !== \"\" ? transformToAssocArray(prmstr) : {};\n    }\n\n    function transformToAssocArray(prmstr) {\n        var params = [];\n        var prmarr = prmstr.split(\"&\");\n        for (var i = 0; i < prmarr.length; i++) {\n            var tmparr = prmarr[i].split(\"=\");\n            params.push({\n                'key': tmparr[0],\n                'value': tmparr[1]\n            });\n        }\n        return params;\n    }\n\n    function merge_objects(obj1, obj2) {\n        var obj3 = {};\n        for (var attrname1 in obj1) {\n            obj3[attrname1] = obj1[attrname1];\n        }\n        for (var attrname2 in obj2) {\n            obj3[attrname2] = obj2[attrname2];\n        }\n\n        return obj3;\n    }\n\n    function ErrorStackParser(settings) {\n        'use strict';\n\n        var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\\S+\\:\\d+/;\n        var CHROME_IE_STACK_REGEXP = /^\\s*at .*(\\S+\\:\\d+|\\(native\\))/m;\n        var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\\[native code\\])?$/;\n\n        return {\n            parse: function (error) {\n                if (typeof error.stacktrace !== 'undefined' || typeof error['opera#sourceloc'] !== 'undefined') {\n                    return this.parseOpera(error);\n                } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {\n                    return this.parseV8OrIE(error);\n                } else if (error.stack) {\n                    return this.parseFFOrSafari(error);\n                } else if (settings.debug) {\n                    console.log('%c Cannot parse given Error object', debugSettings.warningCSS);\n                } else {\n                    return null;\n                }\n            },\n\n            // Separate line and column numbers from a string of the form: (URI:Line:Column)\n            extractLocation: function ErrorStackParser$$extractLocation(urlLike) {\n                // Fail-fast but return locations like \"(native)\"\n                if (urlLike.indexOf(':') === -1) {\n                    return [urlLike];\n                }\n\n                var regExp = /(.+?)(?:\\:(\\d+))?(?:\\:(\\d+))?$/;\n                var parts = regExp.exec(urlLike.replace(/[\\(\\)]/g, ''));\n                return [parts[1], parts[2] || undefined, parts[3] || undefined];\n            },\n\n            parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {\n                var filtered = error.stack.split('\\n').filter(function (line) {\n                    return !!line.match(CHROME_IE_STACK_REGEXP);\n                }, this);\n\n                return filtered.map(function (line) {\n                    if (line.indexOf('(eval ') > -1) {\n                        // Throw away eval information until we implement stacktrace.js/stackframe#8\n                        line = line.replace(/eval code/g, 'eval').replace(/(\\(eval at [^\\()]*)|(\\)\\,.*$)/g, '');\n                    }\n                    var tokens = line.replace(/^\\s+/, '').replace(/\\(eval code/g, '(').split(/\\s+/).slice(1);\n                    var locationParts = this.extractLocation(tokens.pop());\n                    var functionName = tokens.join(' ') || undefined;\n                    var fileName = ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1 ? undefined : locationParts[0];\n\n                    return ({\n                        functionName: functionName,\n                        fileName: fileName,\n                        lineNumber: locationParts[1],\n                        columnNumber: locationParts[2],\n                        source: line\n                    });\n                }, this);\n            },\n\n            parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {\n                var filtered = error.stack.split('\\n').filter(function (line) {\n                    return !line.match(SAFARI_NATIVE_CODE_REGEXP);\n                }, this);\n\n                return filtered.map(function (line) {\n                    // Throw away eval information until we implement stacktrace.js/stackframe#8\n                    if (line.indexOf(' > eval') > -1) {\n                        line = line.replace(/ line (\\d+)(?: > eval line \\d+)* > eval\\:\\d+\\:\\d+/g, ':$1');\n                    }\n\n                    if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {\n                        // Safari eval frames only have function names and nothing else\n                        return ({\n                            functionName: line\n                        });\n                    } else {\n                        var functionNameRegex = /((.*\".+\"[^@]*)?[^@]*)(?:@)/;\n                        var matches = line.match(functionNameRegex);\n                        var functionName = matches && matches[1] ? matches[1] : undefined;\n                        var locationParts = this.extractLocation(line.replace(functionNameRegex, ''));\n\n                        return ({\n                            functionName: functionName,\n                            fileName: locationParts[0],\n                            lineNumber: locationParts[1],\n                            columnNumber: locationParts[2],\n                            source: line\n                        });\n                    }\n                }, this);\n            },\n\n            parseOpera: function ErrorStackParser$$parseOpera(e) {\n                if (!e.stacktrace || (e.message.indexOf('\\n') > -1 &&\n                    e.message.split('\\n').length > e.stacktrace.split('\\n').length)) {\n                    return this.parseOpera9(e);\n                } else if (!e.stack) {\n                    return this.parseOpera10(e);\n                } else {\n                    return this.parseOpera11(e);\n                }\n            },\n\n            parseOpera9: function ErrorStackParser$$parseOpera9(e) {\n                var lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n                var lines = e.message.split('\\n');\n                var result = [];\n\n                for (var i = 2, len = lines.length; i < len; i += 2) {\n                    var match = lineRE.exec(lines[i]);\n                    if (match) {\n                        result.push(({\n                            fileName: match[2],\n                            lineNumber: match[1],\n                            source: lines[i]\n                        }));\n                    }\n                }\n\n                return result;\n            },\n\n            parseOpera10: function ErrorStackParser$$parseOpera10(e) {\n                var lineRE = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i;\n                var lines = e.stacktrace.split('\\n');\n                var result = [];\n\n                for (var i = 0, len = lines.length; i < len; i += 2) {\n                    var match = lineRE.exec(lines[i]);\n                    if (match) {\n                        result.push(\n                            ({\n                                functionName: match[3] || undefined,\n                                fileName: match[2],\n                                lineNumber: match[1],\n                                source: lines[i]\n                            })\n                        );\n                    }\n                }\n\n                return result;\n            },\n\n            // Opera 10.65+ Error.stack very similar to FF/Safari\n            parseOpera11: function ErrorStackParser$$parseOpera11(error) {\n                var filtered = error.stack.split('\\n').filter(function (line) {\n                    return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);\n                }, this);\n\n                return filtered.map(function (line) {\n                    var tokens = line.split('@');\n                    var locationParts = this.extractLocation(tokens.pop());\n                    var functionCall = (tokens.shift() || '');\n                    var functionName = functionCall\n                        .replace(/<anonymous function(: (\\w+))?>/, '$2')\n                        .replace(/\\([^\\)]*\\)/g, '') || undefined;\n                    var argsRaw;\n                    if (functionCall.match(/\\(([^\\)]*)\\)/)) {\n                        argsRaw = functionCall.replace(/^[^\\(]+\\(([^\\)]*)\\)$/, '$1');\n                    }\n                    var args = (argsRaw === undefined || argsRaw === '[arguments not available]') ?\n                        undefined : argsRaw.split(',');\n\n                    return ({\n                        functionName: functionName,\n                        args: args,\n                        fileName: locationParts[0],\n                        lineNumber: locationParts[1],\n                        columnNumber: locationParts[2],\n                        source: line\n                    });\n                }, this);\n            }\n        };\n\n    }\n\n\n    //\n    // Constructor\n    // Can be named anything you want\n    //\n\n    var Constructor = function (options) {\n\n        //\n        // Unique Variables\n        //\n\n        var publicAPIs = {};\n        var settings;\n\n        function getPayload() {\n            var payload = {\n                \"url\": [document.location.protocol, '//', document.location.host, document.location.pathname, document.location.hash].join('') || '/',\n                \"application\": settings.application\n            };\n\n            var payload_data = [];\n\n            if (navigator.language) payload_data.push({ \"key\": \"User-Language\", \"value\": navigator.language });\n            if (document.documentMode) payload_data.push({ \"key\": \"Document-Mode\", \"value\": document.documentMode });\n            if (window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth) payload_data.push({ \"key\": \"Browser-Width\", \"value\": window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth });\n            if (window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight) payload_data.push({ \"key\": \"Browser-Height\", \"value\": window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight });\n            if ((screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type) !== undefined) payload_data.push({ \"key\": \"Screen-Orientation\", \"value\": ((screen.msOrientation || (screen.orientation || screen.mozOrientation || {}).type).split(\"-\"))[0] });\n            if (screen.width) payload_data.push({ \"key\": \"Screen-Width\", \"value\": screen.width });\n            if (screen.height) payload_data.push({ \"key\": \"Screen-Height\", \"value\": screen.height });\n            if (screen.colorDepth) payload_data.push({ \"key\": \"Color-Depth\", \"value\": screen.colorDepth });\n            payload_data.push({ \"key\": \"X-ELMAHIO-SEARCH-isClientside\", \"value\": \"true\" });\n\n            payload.data = payload_data;\n\n            var payload_serverVariables = [];\n            if (navigator.userAgent) payload_serverVariables.push({ \"key\": \"User-Agent\", \"value\": navigator.userAgent });\n            if (document.referrer) payload_serverVariables.push({ \"key\": \"Referer\", \"value\": document.referrer });\n\n            payload.serverVariables = payload_serverVariables;\n\n            return payload;\n        }\n\n        function confirmResponse(status, response) {\n            if (settings.debug) {\n                if (status === 'error') {\n                    console.log('%c \\u2BC8 Error log: ' + '%c \\u2715 Not created ', debugSettings.lightCSS, debugSettings.errorCSS);\n                } else if (status === 'success') {\n                    console.log('%c \\u2BC8 Error log: ' + '%c \\u2714 ' + response + ' at ' + new Date().toLocaleString() + ' ', debugSettings.lightCSS, debugSettings.successCSS);\n                } else {\n                    console.log('%c \\u2BC8 Error log: ' + '%c \\u2715 Not created. Title should not be undefined, null or empty ! ', debugSettings.lightCSS, debugSettings.errorCSS);\n                }\n            }\n        }\n\n        // Private methods\n\n        var sendPayload = function (apiKey, logId, callback, errorLog) {\n            var api_key = apiKey,\n                log_id = logId,\n                error = errorLog,\n                send = 1,\n                queryParams = getSearchParameters();\n\n            if ((api_key !== null && log_id !== null) || (paramsLength === 2)) {\n\n                // Priority for parameters\n                if (params.hasOwnProperty('apiKey') && params.hasOwnProperty('logId')) {\n                    api_key = params['apiKey'];\n                    log_id = params['logId'];\n                }\n\n                // get new XHR object\n                var xhr = new XMLHttpRequest();\n                xhr.open(\"POST\", \"https://api.elmah.io/v3/messages/\" + log_id + \"?api_key=\" + api_key, true);\n                xhr.setRequestHeader('Content-type', 'application/json');\n\n                xhr.onload = function (e) {\n                    if (xhr.readyState === 4) {\n                        if (xhr.status === 201) {\n                            callback('success', xhr.statusText);\n                        }\n                    }\n                };\n\n                xhr.onerror = function (e) {\n                    callback('error', xhr.statusText);\n\n                    // on error event\n                    publicAPIs.emit('error', xhr.status, xhr.statusText);\n                }\n\n                var stack = ErrorStackParser(settings).parse(error.error);\n\n                var jsonData = {\n                    \"detail\": error.error.stack,\n                    \"title\": error.message || 'Unspecified error',\n                    \"source\": stack && stack.length > 0 ? stack[0].fileName : null,\n                    \"severity\": \"Error\",\n                    \"type\": error.error.name,\n                    \"queryString\": JSON.parse(JSON.stringify(queryParams))\n                };\n\n                // Add payload to jsonData\n                jsonData = merge_objects(jsonData, getPayload());\n\n                // onFilter callback\n                if (settings.onFilter !== null) {\n                    if (settings.onFilter(jsonData)) {\n                        send = 0;\n                    }\n                }\n\n                // on message event\n                publicAPIs.emit('message', jsonData);\n\n                if (send === 1) {\n                    xhr.send(JSON.stringify(jsonData));\n                }\n\n            } else {\n                return console.log('Login api error');\n            }\n        };\n\n        var sendManualPayload = function (apiKey, logId, callback, logType, messageLog, errorLog) {\n            var api_key = apiKey,\n                log_id = logId,\n                type = logType,\n                error = errorLog,\n                message = messageLog,\n                send = 1,\n                queryParams = getSearchParameters();\n\n            if ((api_key !== null && log_id !== null) || (paramsLength === 2)) {\n\n                // Priority for parameters\n                if (params.hasOwnProperty('apiKey') && params.hasOwnProperty('logId')) {\n                    api_key = params['apiKey'];\n                    log_id = params['logId'];\n                }\n\n                // get new XHR object\n                var xhr = new XMLHttpRequest();\n                xhr.open(\"POST\", \"https://api.elmah.io/v3/messages/\" + log_id + \"?api_key=\" + api_key, true);\n                xhr.setRequestHeader('Content-type', 'application/json');\n\n                xhr.onload = function (e) {\n                    if (xhr.readyState === 4) {\n                        if (xhr.status === 201) {\n                            callback('success', xhr.statusText);\n                        }\n                    }\n                };\n\n                xhr.onerror = function (e) {\n                    callback('error', xhr.statusText);\n\n                    // on error event\n                    publicAPIs.emit('error', xhr.status, xhr.statusText);\n                }\n\n                if (type !== \"Log\") {\n\n                    var stack = error ? ErrorStackParser(settings).parse(error) : null;\n\n                    var jsonData = {\n                        \"title\": message,\n                        \"source\": stack && stack.length > 0 ? stack[0].fileName : null,\n                        \"detail\": error ? error.stack : null,\n                        \"severity\": type,\n                        \"type\": error ? error.name : null,\n                        \"queryString\": JSON.parse(JSON.stringify(queryParams))\n                    };\n\n                    // Add payload to jsonData\n                    jsonData = merge_objects(jsonData, getPayload());\n\n                } else {\n\n                    jsonData = error;\n\n                }\n\n                // onFilter callback\n                if (settings.onFilter !== null) {\n                    if (settings.onFilter(jsonData)) {\n                        send = 0;\n                    }\n                }\n\n                // on message event\n                publicAPIs.emit('message', jsonData);\n\n                if (send === 1) {\n                    if (jsonData.title) {\n                        xhr.send(JSON.stringify(jsonData));\n                    } else {\n                        callback('missing-title', xhr.statusText);\n                    }\n                }\n\n            } else {\n                return console.log('Login api error');\n            }\n        };\n\n        // Some public methods\n\n        publicAPIs.error = function (msg) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Error', msg);\n        };\n        publicAPIs.error = function (msg, error) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Error', msg, error);\n        };\n\n        publicAPIs.verbose = function (msg) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Verbose', msg);\n        };\n        publicAPIs.verbose = function (msg, error) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Verbose', msg, error);\n        };\n\n        publicAPIs.debug = function (msg) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Debug', msg);\n        };\n        publicAPIs.debug = function (msg, error) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Debug', msg, error);\n        };\n\n        publicAPIs.information = function (msg) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Information', msg);\n        };\n        publicAPIs.information = function (msg, error) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Information', msg, error);\n        };\n\n        publicAPIs.warning = function (msg) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Warning', msg);\n        };\n        publicAPIs.warning = function (msg, error) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Warning', msg, error);\n        };\n\n        publicAPIs.fatal = function (msg) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Fatal', msg);\n        };\n        publicAPIs.fatal = function (msg, error) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Fatal', msg, error);\n        };\n\n        publicAPIs.log = function (obj) {\n            sendManualPayload(settings.apiKey, settings.logId, confirmResponse, 'Log', null, obj);\n        };\n\n        publicAPIs.on = function (name, callback, ctx) {\n            var e = this.e || (this.e = {});\n\n            (e[name] || (e[name] = [])).push({\n                fn: callback,\n                ctx: ctx\n            });\n\n            return this;\n        };\n\n        publicAPIs.emit = function (name) {\n            var data = [].slice.call(arguments, 1);\n            var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n            var i = 0;\n            var len = evtArr.length;\n\n            for (i; i < len; i++) {\n                evtArr[i].fn.apply(evtArr[i].ctx, data);\n            }\n\n            return this;\n        };\n\n        publicAPIs.init = function (options) {\n\n            // Merge options into defaults\n            settings = extend(defaults, options || {});\n\n            // Code goes here...\n            window.onerror = function (message, source, lineno, colno, error) {\n\n                var errorLog = {\n                    'message': message,\n                    'source': source,\n                    'lineno': lineno,\n                    'colno': colno,\n                    'error': error\n                }\n\n                sendPayload(settings.apiKey, settings.logId, confirmResponse, errorLog);\n\n                return false;\n            }\n\n        };\n\n        // Initialize the plugin\n        publicAPIs.init(options);\n\n        if (settings.debug) {\n            console.log('%c' + debugSettings.label, debugSettings.labelCSS);\n        }\n\n        // Return the public APIs\n        return publicAPIs;\n\n    };\n\n\n    //\n    // Return the constructor\n    //\n\n    if (paramsLength && params.hasOwnProperty('apiKey') && params.hasOwnProperty('logId')) {\n        // Immediately-Invoked Function Expression (IIFE)\n        return new Constructor;\n    } else {\n        // UMD Constructor\n        return Constructor;\n    }\n\n});\n"],"file":"elmahio.js"}